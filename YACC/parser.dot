digraph Automaton {
  0 [label="0\n$accept -> . program $end"]
  0 -> 1 [style=solid label="FUNCTION_BLOCK"]
  0 -> 2 [style=dashed label="program"]
  0 -> 3 [style=dashed label="function_block_declaration"]
  1 [label="1\nfunction_block_declaration -> FUNCTION_BLOCK . IDENTIFIER fb_io_var_declarations_list other_var_declarations_list function_block_body END_FUNCTION_BLOCK"]
  1 -> 4 [style=solid label="IDENTIFIER"]
  2 [label="2\n$accept -> program . $end"]
  2 -> 5 [style=solid label="$end"]
  3 [label="3\nprogram -> function_block_declaration ."]
  4 [label="4\nfunction_block_declaration -> FUNCTION_BLOCK IDENTIFIER . fb_io_var_declarations_list other_var_declarations_list function_block_body END_FUNCTION_BLOCK"]
  4 -> 6 [style=dashed label="fb_io_var_declarations_list"]
  5 [label="5\n$accept -> program $end ."]
  6 [label="6\nfunction_block_declaration -> FUNCTION_BLOCK IDENTIFIER fb_io_var_declarations_list . other_var_declarations_list function_block_body END_FUNCTION_BLOCK\nfb_io_var_declarations_list -> fb_io_var_declarations_list . fb_io_var_declarations"]
  6 -> 7 [style=solid label="VAR_INPUT"]
  6 -> 8 [style=solid label="VAR_OUTPUT"]
  6 -> 9 [style=dashed label="fb_io_var_declarations"]
  6 -> 10 [style=dashed label="other_var_declarations_list"]
  6 -> 11 [style=dashed label="output_declarations"]
  6 -> 12 [style=dashed label="input_declarations"]
  7 [label="7\ninput_declarations -> VAR_INPUT . var_retain_spec input_declaration_list END_VAR"]
  7 -> 13 [style=solid label="RETAIN"]
  7 -> 14 [style=solid label="NON_RETAIN"]
  7 -> 15 [style=dashed label="var_retain_spec"]
  8 [label="8\noutput_declarations -> VAR_OUTPUT . var_retain_spec var_init_decl_list END_VAR"]
  8 -> 13 [style=solid label="RETAIN"]
  8 -> 14 [style=solid label="NON_RETAIN"]
  8 -> 16 [style=dashed label="var_retain_spec"]
  9 [label="9\nfb_io_var_declarations_list -> fb_io_var_declarations_list fb_io_var_declarations ."]
  10 [label="10\nfunction_block_declaration -> FUNCTION_BLOCK IDENTIFIER fb_io_var_declarations_list other_var_declarations_list . function_block_body END_FUNCTION_BLOCK\nother_var_declarations_list -> other_var_declarations_list . other_var_declarations"]
  10 -> 17 [style=solid label="VAR"]
  10 -> 18 [style=dashed label="other_var_declarations"]
  10 -> 19 [style=dashed label="function_block_body"]
  10 -> 20 [style=dashed label="fuzzify_block_list"]
  10 -> 21 [style=dashed label="var_declarations"]
  11 [label="11\nfb_io_var_declarations -> output_declarations ."]
  12 [label="12\nfb_io_var_declarations -> input_declarations ."]
  13 [label="13\nvar_retain_spec -> RETAIN ."]
  14 [label="14\nvar_retain_spec -> NON_RETAIN ."]
  15 [label="15\ninput_declarations -> VAR_INPUT var_retain_spec . input_declaration_list END_VAR"]
  15 -> 22 [style=solid label="IDENTIFIER"]
  15 -> 23 [style=dashed label="input_declaration_list"]
  15 -> 24 [style=dashed label="input_declaration"]
  15 -> 25 [style=dashed label="edge_declaration"]
  15 -> 26 [style=dashed label="var_init_decl"]
  15 -> 27 [style=dashed label="var1_init_decl"]
  15 -> 28 [style=dashed label="var1_list"]
  15 -> 29 [style=dashed label="array_var_init_decl"]
  15 -> 30 [style=dashed label="structured_var_init_decl"]
  15 -> 31 [style=dashed label="fb_name_decl"]
  15 -> 32 [style=dashed label="fb_name_list"]
  15 -> 33 [style=dashed label="string_var_declaration"]
  15 -> 34 [style=dashed label="single_byte_string_var_declaration"]
  15 -> 35 [style=dashed label="double_byte_string_var_declaration"]
  16 [label="16\noutput_declarations -> VAR_OUTPUT var_retain_spec . var_init_decl_list END_VAR"]
  16 -> 22 [style=solid label="IDENTIFIER"]
  16 -> 36 [style=dashed label="var_init_decl_list"]
  16 -> 37 [style=dashed label="var_init_decl"]
  16 -> 27 [style=dashed label="var1_init_decl"]
  16 -> 38 [style=dashed label="var1_list"]
  16 -> 29 [style=dashed label="array_var_init_decl"]
  16 -> 30 [style=dashed label="structured_var_init_decl"]
  16 -> 31 [style=dashed label="fb_name_decl"]
  16 -> 32 [style=dashed label="fb_name_list"]
  16 -> 33 [style=dashed label="string_var_declaration"]
  16 -> 34 [style=dashed label="single_byte_string_var_declaration"]
  16 -> 35 [style=dashed label="double_byte_string_var_declaration"]
  17 [label="17\nvar_declarations -> VAR . var_constant_spec var_init_decl_list END_VAR"]
  17 -> 39 [style=solid label="CONSTANT"]
  17 -> 40 [style=dashed label="var_constant_spec"]
  18 [label="18\nother_var_declarations_list -> other_var_declarations_list other_var_declarations ."]
  19 [label="19\nfunction_block_declaration -> FUNCTION_BLOCK IDENTIFIER fb_io_var_declarations_list other_var_declarations_list function_block_body . END_FUNCTION_BLOCK"]
  19 -> 41 [style=solid label="END_FUNCTION_BLOCK"]
  20 [label="20\nfunction_block_body -> fuzzify_block_list . defuzzify_block_list rule_block_list option_block_list\nfuzzify_block_list -> fuzzify_block_list . fuzzify_block"]
  20 -> 42 [style=solid label="FUZZIFY"]
  20 -> 43 [style=dashed label="fuzzify_block"]
  20 -> 44 [style=dashed label="defuzzify_block_list"]
  21 [label="21\nother_var_declarations -> var_declarations ."]
  22 [label="22\nvar1_list -> IDENTIFIER .\nfb_name_decl -> IDENTIFIER . ':' function_block_type_name\nfb_name_decl -> IDENTIFIER . ':' function_block_type_name ':' '=' structure_initialization\nfb_name_list -> IDENTIFIER ."]
  22 -> 45 [style=solid label="':'"]
  23 [label="23\ninput_declarations -> VAR_INPUT var_retain_spec input_declaration_list . END_VAR\ninput_declaration_list -> input_declaration_list . ';' input_declaration"]
  23 -> 46 [style=solid label="END_VAR"]
  23 -> 47 [style=solid label="';'"]
  24 [label="24\ninput_declaration_list -> input_declaration ."]
  25 [label="25\ninput_declaration -> edge_declaration ."]
  26 [label="26\ninput_declaration -> var_init_decl ."]
  27 [label="27\nvar_init_decl -> var1_init_decl ."]
  28 [label="28\nedge_declaration -> var1_list . ':' BOOL edge_type\nvar1_init_decl -> var1_list . ':' spec_init_type\nvar1_list -> var1_list . ',' IDENTIFIER\narray_var_init_decl -> var1_list . ':' array_spec_init\nstructured_var_init_decl -> var1_list . ':' initialized_structure\nstructured_var_init_decl -> var1_list . ':' IDENTIFIER\nsingle_byte_string_var_declaration -> var1_list . ':' single_byte_string_spec\ndouble_byte_string_var_declaration -> var1_list . ':' double_byte_string_spec"]
  28 -> 48 [style=solid label="':'"]
  28 -> 49 [style=solid label="','"]
  29 [label="29\nvar_init_decl -> array_var_init_decl ."]
  30 [label="30\nvar_init_decl -> structured_var_init_decl ."]
  31 [label="31\nvar_init_decl -> fb_name_decl ."]
  32 [label="32\nfb_name_decl -> fb_name_list . ':' function_block_type_name\nfb_name_decl -> fb_name_list . ':' function_block_type_name ':' '=' structure_initialization\nfb_name_list -> fb_name_list . ',' IDENTIFIER"]
  32 -> 50 [style=solid label="':'"]
  32 -> 51 [style=solid label="','"]
  33 [label="33\nvar_init_decl -> string_var_declaration ."]
  34 [label="34\nstring_var_declaration -> single_byte_string_var_declaration ."]
  35 [label="35\nstring_var_declaration -> double_byte_string_var_declaration ."]
  36 [label="36\noutput_declarations -> VAR_OUTPUT var_retain_spec var_init_decl_list . END_VAR\nvar_init_decl_list -> var_init_decl_list . ';' var_init_decl"]
  36 -> 52 [style=solid label="END_VAR"]
  36 -> 53 [style=solid label="';'"]
  37 [label="37\nvar_init_decl_list -> var_init_decl ."]
  38 [label="38\nvar1_init_decl -> var1_list . ':' spec_init_type\nvar1_list -> var1_list . ',' IDENTIFIER\narray_var_init_decl -> var1_list . ':' array_spec_init\nstructured_var_init_decl -> var1_list . ':' initialized_structure\nstructured_var_init_decl -> var1_list . ':' IDENTIFIER\nsingle_byte_string_var_declaration -> var1_list . ':' single_byte_string_spec\ndouble_byte_string_var_declaration -> var1_list . ':' double_byte_string_spec"]
  38 -> 54 [style=solid label="':'"]
  38 -> 49 [style=solid label="','"]
  39 [label="39\nvar_constant_spec -> CONSTANT ."]
  40 [label="40\nvar_declarations -> VAR var_constant_spec . var_init_decl_list END_VAR"]
  40 -> 22 [style=solid label="IDENTIFIER"]
  40 -> 55 [style=dashed label="var_init_decl_list"]
  40 -> 37 [style=dashed label="var_init_decl"]
  40 -> 27 [style=dashed label="var1_init_decl"]
  40 -> 38 [style=dashed label="var1_list"]
  40 -> 29 [style=dashed label="array_var_init_decl"]
  40 -> 30 [style=dashed label="structured_var_init_decl"]
  40 -> 31 [style=dashed label="fb_name_decl"]
  40 -> 32 [style=dashed label="fb_name_list"]
  40 -> 33 [style=dashed label="string_var_declaration"]
  40 -> 34 [style=dashed label="single_byte_string_var_declaration"]
  40 -> 35 [style=dashed label="double_byte_string_var_declaration"]
  41 [label="41\nfunction_block_declaration -> FUNCTION_BLOCK IDENTIFIER fb_io_var_declarations_list other_var_declarations_list function_block_body END_FUNCTION_BLOCK ."]
  42 [label="42\nfuzzify_block -> FUZZIFY . IDENTIFIER linguistic_term_list END_FUZZIFY"]
  42 -> 56 [style=solid label="IDENTIFIER"]
  43 [label="43\nfuzzify_block_list -> fuzzify_block_list fuzzify_block ."]
  44 [label="44\nfunction_block_body -> fuzzify_block_list defuzzify_block_list . rule_block_list option_block_list\ndefuzzify_block_list -> defuzzify_block_list . defuzzify_block"]
  44 -> 57 [style=solid label="DEFUZZIFY"]
  44 -> 58 [style=dashed label="defuzzify_block"]
  44 -> 59 [style=dashed label="rule_block_list"]
  45 [label="45\nfb_name_decl -> IDENTIFIER ':' . function_block_type_name\nfb_name_decl -> IDENTIFIER ':' . function_block_type_name ':' '=' structure_initialization"]
  45 -> 60 [style=solid label="IDENTIFIER"]
  45 -> 61 [style=dashed label="function_block_type_name"]
  45 -> 62 [style=dashed label="standard_function_block_name"]
  46 [label="46\ninput_declarations -> VAR_INPUT var_retain_spec input_declaration_list END_VAR ."]
  47 [label="47\ninput_declaration_list -> input_declaration_list ';' . input_declaration"]
  47 -> 22 [style=solid label="IDENTIFIER"]
  47 -> 63 [style=dashed label="input_declaration"]
  47 -> 25 [style=dashed label="edge_declaration"]
  47 -> 26 [style=dashed label="var_init_decl"]
  47 -> 27 [style=dashed label="var1_init_decl"]
  47 -> 28 [style=dashed label="var1_list"]
  47 -> 29 [style=dashed label="array_var_init_decl"]
  47 -> 30 [style=dashed label="structured_var_init_decl"]
  47 -> 31 [style=dashed label="fb_name_decl"]
  47 -> 32 [style=dashed label="fb_name_list"]
  47 -> 33 [style=dashed label="string_var_declaration"]
  47 -> 34 [style=dashed label="single_byte_string_var_declaration"]
  47 -> 35 [style=dashed label="double_byte_string_var_declaration"]
  48 [label="48\nedge_declaration -> var1_list ':' . BOOL edge_type\nvar1_init_decl -> var1_list ':' . spec_init_type\narray_var_init_decl -> var1_list ':' . array_spec_init\nstructured_var_init_decl -> var1_list ':' . initialized_structure\nstructured_var_init_decl -> var1_list ':' . IDENTIFIER\nsingle_byte_string_var_declaration -> var1_list ':' . single_byte_string_spec\ndouble_byte_string_var_declaration -> var1_list ':' . double_byte_string_spec"]
  48 -> 64 [style=solid label="IDENTIFIER"]
  48 -> 65 [style=solid label="BOOL"]
  48 -> 66 [style=solid label="STRING"]
  48 -> 67 [style=solid label="WSTRING"]
  48 -> 68 [style=solid label="BYTE"]
  48 -> 69 [style=solid label="WORD"]
  48 -> 70 [style=solid label="DWORD"]
  48 -> 71 [style=solid label="LWORD"]
  48 -> 72 [style=solid label="TIME"]
  48 -> 73 [style=solid label="TIME_OF_DAY"]
  48 -> 74 [style=solid label="TOD"]
  48 -> 75 [style=solid label="DATE"]
  48 -> 76 [style=solid label="DATE_AND_TIME"]
  48 -> 77 [style=solid label="DT"]
  48 -> 78 [style=solid label="SINT"]
  48 -> 79 [style=solid label="INT"]
  48 -> 80 [style=solid label="DINT"]
  48 -> 81 [style=solid label="LINT"]
  48 -> 82 [style=solid label="USINT"]
  48 -> 83 [style=solid label="UINT"]
  48 -> 84 [style=solid label="UDINT"]
  48 -> 85 [style=solid label="ULINT"]
  48 -> 86 [style=solid label="REAL"]
  48 -> 87 [style=solid label="LREAL"]
  48 -> 88 [style=solid label="ARRAY"]
  48 -> 89 [style=solid label="'('"]
  48 -> 90 [style=dashed label="spec_init_type"]
  48 -> 91 [style=dashed label="simple_spec_init"]
  48 -> 92 [style=dashed label="simple_specification"]
  48 -> 93 [style=dashed label="elementary_type_name"]
  48 -> 94 [style=dashed label="numeric_type_name"]
  48 -> 95 [style=dashed label="integer_type_name"]
  48 -> 96 [style=dashed label="signed_integer_type_name"]
  48 -> 97 [style=dashed label="unsigned_integer_type_name"]
  48 -> 98 [style=dashed label="real_type_name"]
  48 -> 99 [style=dashed label="date_type_name"]
  48 -> 100 [style=dashed label="bit_string_type_name"]
  48 -> 101 [style=dashed label="simple_type_name"]
  48 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  48 -> 103 [style=dashed label="subrange_spec_init"]
  48 -> 104 [style=dashed label="subrange_specification"]
  48 -> 105 [style=dashed label="subrange_type_name"]
  48 -> 106 [style=dashed label="enumerated_spec_init"]
  48 -> 107 [style=dashed label="enumerated_specification"]
  48 -> 108 [style=dashed label="enumerated_type_name"]
  48 -> 109 [style=dashed label="array_spec_init"]
  48 -> 110 [style=dashed label="array_specification"]
  48 -> 111 [style=dashed label="initialized_structure"]
  48 -> 112 [style=dashed label="single_byte_string_spec"]
  48 -> 113 [style=dashed label="double_byte_string_spec"]
  49 [label="49\nvar1_list -> var1_list ',' . IDENTIFIER"]
  49 -> 114 [style=solid label="IDENTIFIER"]
  50 [label="50\nfb_name_decl -> fb_name_list ':' . function_block_type_name\nfb_name_decl -> fb_name_list ':' . function_block_type_name ':' '=' structure_initialization"]
  50 -> 60 [style=solid label="IDENTIFIER"]
  50 -> 115 [style=dashed label="function_block_type_name"]
  50 -> 62 [style=dashed label="standard_function_block_name"]
  51 [label="51\nfb_name_list -> fb_name_list ',' . IDENTIFIER"]
  51 -> 116 [style=solid label="IDENTIFIER"]
  52 [label="52\noutput_declarations -> VAR_OUTPUT var_retain_spec var_init_decl_list END_VAR ."]
  53 [label="53\nvar_init_decl_list -> var_init_decl_list ';' . var_init_decl"]
  53 -> 22 [style=solid label="IDENTIFIER"]
  53 -> 117 [style=dashed label="var_init_decl"]
  53 -> 27 [style=dashed label="var1_init_decl"]
  53 -> 38 [style=dashed label="var1_list"]
  53 -> 29 [style=dashed label="array_var_init_decl"]
  53 -> 30 [style=dashed label="structured_var_init_decl"]
  53 -> 31 [style=dashed label="fb_name_decl"]
  53 -> 32 [style=dashed label="fb_name_list"]
  53 -> 33 [style=dashed label="string_var_declaration"]
  53 -> 34 [style=dashed label="single_byte_string_var_declaration"]
  53 -> 35 [style=dashed label="double_byte_string_var_declaration"]
  54 [label="54\nvar1_init_decl -> var1_list ':' . spec_init_type\narray_var_init_decl -> var1_list ':' . array_spec_init\nstructured_var_init_decl -> var1_list ':' . initialized_structure\nstructured_var_init_decl -> var1_list ':' . IDENTIFIER\nsingle_byte_string_var_declaration -> var1_list ':' . single_byte_string_spec\ndouble_byte_string_var_declaration -> var1_list ':' . double_byte_string_spec"]
  54 -> 64 [style=solid label="IDENTIFIER"]
  54 -> 118 [style=solid label="BOOL"]
  54 -> 66 [style=solid label="STRING"]
  54 -> 67 [style=solid label="WSTRING"]
  54 -> 68 [style=solid label="BYTE"]
  54 -> 69 [style=solid label="WORD"]
  54 -> 70 [style=solid label="DWORD"]
  54 -> 71 [style=solid label="LWORD"]
  54 -> 72 [style=solid label="TIME"]
  54 -> 73 [style=solid label="TIME_OF_DAY"]
  54 -> 74 [style=solid label="TOD"]
  54 -> 75 [style=solid label="DATE"]
  54 -> 76 [style=solid label="DATE_AND_TIME"]
  54 -> 77 [style=solid label="DT"]
  54 -> 78 [style=solid label="SINT"]
  54 -> 79 [style=solid label="INT"]
  54 -> 80 [style=solid label="DINT"]
  54 -> 81 [style=solid label="LINT"]
  54 -> 82 [style=solid label="USINT"]
  54 -> 83 [style=solid label="UINT"]
  54 -> 84 [style=solid label="UDINT"]
  54 -> 85 [style=solid label="ULINT"]
  54 -> 86 [style=solid label="REAL"]
  54 -> 87 [style=solid label="LREAL"]
  54 -> 88 [style=solid label="ARRAY"]
  54 -> 89 [style=solid label="'('"]
  54 -> 90 [style=dashed label="spec_init_type"]
  54 -> 91 [style=dashed label="simple_spec_init"]
  54 -> 92 [style=dashed label="simple_specification"]
  54 -> 93 [style=dashed label="elementary_type_name"]
  54 -> 94 [style=dashed label="numeric_type_name"]
  54 -> 95 [style=dashed label="integer_type_name"]
  54 -> 96 [style=dashed label="signed_integer_type_name"]
  54 -> 97 [style=dashed label="unsigned_integer_type_name"]
  54 -> 98 [style=dashed label="real_type_name"]
  54 -> 99 [style=dashed label="date_type_name"]
  54 -> 100 [style=dashed label="bit_string_type_name"]
  54 -> 101 [style=dashed label="simple_type_name"]
  54 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  54 -> 103 [style=dashed label="subrange_spec_init"]
  54 -> 104 [style=dashed label="subrange_specification"]
  54 -> 105 [style=dashed label="subrange_type_name"]
  54 -> 106 [style=dashed label="enumerated_spec_init"]
  54 -> 107 [style=dashed label="enumerated_specification"]
  54 -> 108 [style=dashed label="enumerated_type_name"]
  54 -> 109 [style=dashed label="array_spec_init"]
  54 -> 110 [style=dashed label="array_specification"]
  54 -> 111 [style=dashed label="initialized_structure"]
  54 -> 112 [style=dashed label="single_byte_string_spec"]
  54 -> 113 [style=dashed label="double_byte_string_spec"]
  55 [label="55\nvar_declarations -> VAR var_constant_spec var_init_decl_list . END_VAR\nvar_init_decl_list -> var_init_decl_list . ';' var_init_decl"]
  55 -> 119 [style=solid label="END_VAR"]
  55 -> 53 [style=solid label="';'"]
  56 [label="56\nfuzzify_block -> FUZZIFY IDENTIFIER . linguistic_term_list END_FUZZIFY"]
  56 -> 120 [style=dashed label="linguistic_term_list"]
  57 [label="57\ndefuzzify_block -> DEFUZZIFY . IDENTIFIER range_opt linguistic_term_list defuzzification_method default_value END_DEFUZZIFY"]
  57 -> 121 [style=solid label="IDENTIFIER"]
  58 [label="58\ndefuzzify_block_list -> defuzzify_block_list defuzzify_block ."]
  59 [label="59\nfunction_block_body -> fuzzify_block_list defuzzify_block_list rule_block_list . option_block_list\nrule_block_list -> rule_block_list . rule_block"]
  59 -> 122 [style=solid label="RULEBLOCK"]
  59 -> 123 [style=dashed label="rule_block"]
  59 -> 124 [style=dashed label="option_block_list"]
  60 [label="60\nfunction_block_type_name -> IDENTIFIER .\nstandard_function_block_name -> IDENTIFIER ."]
  61 [label="61\nfb_name_decl -> IDENTIFIER ':' function_block_type_name .\nfb_name_decl -> IDENTIFIER ':' function_block_type_name . ':' '=' structure_initialization"]
  61 -> 125 [style=solid label="':'"]
  62 [label="62\nfunction_block_type_name -> standard_function_block_name ."]
  63 [label="63\ninput_declaration_list -> input_declaration_list ';' input_declaration ."]
  64 [label="64\nsimple_type_name -> IDENTIFIER .\nsubrange_type_name -> IDENTIFIER .\nenumerated_type_name -> IDENTIFIER .\narray_specification -> IDENTIFIER .\nstructured_var_init_decl -> var1_list ':' IDENTIFIER .\ninitialized_structure -> IDENTIFIER . ':' '=' structure_initialization"]
  64 -> 126 [style=solid label="':'"]
  65 [label="65\nedge_declaration -> var1_list ':' BOOL . edge_type\nbit_string_type_name -> BOOL ."]
  65 -> 127 [style=solid label="R_EDGE"]
  65 -> 128 [style=solid label="F_EDGE"]
  65 -> 129 [style=dashed label="edge_type"]
  66 [label="66\nelementary_type_name -> STRING .\nsingle_byte_string_spec -> STRING .\nsingle_byte_string_spec -> STRING . '[' INTEGER_NUMBER ']'\nsingle_byte_string_spec -> STRING . ':' '=' CHARACTER_STRING\nsingle_byte_string_spec -> STRING . '[' INTEGER_NUMBER ']' ':' '=' CHARACTER_STRING"]
  66 -> 130 [style=solid label="':'"]
  66 -> 131 [style=solid label="'['"]
  67 [label="67\nelementary_type_name -> WSTRING .\ndouble_byte_string_spec -> WSTRING .\ndouble_byte_string_spec -> WSTRING . '[' INTEGER_NUMBER ']'\ndouble_byte_string_spec -> WSTRING . ':' '=' CHARACTER_STRING\ndouble_byte_string_spec -> WSTRING . '[' INTEGER_NUMBER ']' ':' '=' CHARACTER_STRING"]
  67 -> 132 [style=solid label="':'"]
  67 -> 133 [style=solid label="'['"]
  68 [label="68\nbit_string_type_name_without_bool -> BYTE ."]
  69 [label="69\nbit_string_type_name_without_bool -> WORD ."]
  70 [label="70\nbit_string_type_name_without_bool -> DWORD ."]
  71 [label="71\nbit_string_type_name_without_bool -> LWORD ."]
  72 [label="72\nelementary_type_name -> TIME ."]
  73 [label="73\ndate_type_name -> TIME_OF_DAY ."]
  74 [label="74\ndate_type_name -> TOD ."]
  75 [label="75\ndate_type_name -> DATE ."]
  76 [label="76\ndate_type_name -> DATE_AND_TIME ."]
  77 [label="77\ndate_type_name -> DT ."]
  78 [label="78\nsigned_integer_type_name -> SINT ."]
  79 [label="79\nsigned_integer_type_name -> INT ."]
  80 [label="80\nsigned_integer_type_name -> DINT ."]
  81 [label="81\nsigned_integer_type_name -> LINT ."]
  82 [label="82\nunsigned_integer_type_name -> USINT ."]
  83 [label="83\nunsigned_integer_type_name -> UINT ."]
  84 [label="84\nunsigned_integer_type_name -> UDINT ."]
  85 [label="85\nunsigned_integer_type_name -> ULINT ."]
  86 [label="86\nreal_type_name -> REAL ."]
  87 [label="87\nreal_type_name -> LREAL ."]
  88 [label="88\narray_specification -> ARRAY . '[' subrange_list ']' OF non_generic_type_name"]
  88 -> 134 [style=solid label="'['"]
  89 [label="89\nenumerated_specification -> '(' . enumerated_value_list ')'"]
  89 -> 135 [style=solid label="IDENTIFIER"]
  89 -> 136 [style=dashed label="enumerated_value_list"]
  89 -> 137 [style=dashed label="enumerated_value"]
  89 -> 138 [style=dashed label="enumerated_type_name"]
  90 [label="90\nvar1_init_decl -> var1_list ':' spec_init_type ."]
  91 [label="91\nspec_init_type -> simple_spec_init ."]
  92 [label="92\nsimple_spec_init -> simple_specification .\nsimple_spec_init -> simple_specification . ':' '=' constant"]
  92 -> 139 [style=solid label="':'"]
  93 [label="93\nsimple_specification -> elementary_type_name ."]
  94 [label="94\nelementary_type_name -> numeric_type_name ."]
  95 [label="95\nnumeric_type_name -> integer_type_name .\nsubrange_specification -> integer_type_name . '(' subrange ')'"]
  95 -> 140 [style=solid label="'('"]
  96 [label="96\ninteger_type_name -> signed_integer_type_name ."]
  97 [label="97\ninteger_type_name -> unsigned_integer_type_name ."]
  98 [label="98\nnumeric_type_name -> real_type_name ."]
  99 [label="99\nelementary_type_name -> date_type_name ."]
  100 [label="100\nelementary_type_name -> bit_string_type_name ."]
  101 [label="101\nsimple_specification -> simple_type_name ."]
  102 [label="102\nbit_string_type_name -> bit_string_type_name_without_bool ."]
  103 [label="103\nspec_init_type -> subrange_spec_init ."]
  104 [label="104\nsubrange_spec_init -> subrange_specification .\nsubrange_spec_init -> subrange_specification . ':' '=' SIGNED_INTEGER"]
  104 -> 141 [style=solid label="':'"]
  105 [label="105\nsubrange_specification -> subrange_type_name ."]
  106 [label="106\nspec_init_type -> enumerated_spec_init ."]
  107 [label="107\nenumerated_spec_init -> enumerated_specification .\nenumerated_spec_init -> enumerated_specification . ':' '=' enumerated_value"]
  107 -> 142 [style=solid label="':'"]
  108 [label="108\nenumerated_specification -> enumerated_type_name ."]
  109 [label="109\narray_var_init_decl -> var1_list ':' array_spec_init ."]
  110 [label="110\narray_spec_init -> array_specification .\narray_spec_init -> array_specification . ':' '=' array_initialization"]
  110 -> 143 [style=solid label="':'"]
  111 [label="111\nstructured_var_init_decl -> var1_list ':' initialized_structure ."]
  112 [label="112\nsingle_byte_string_var_declaration -> var1_list ':' single_byte_string_spec ."]
  113 [label="113\ndouble_byte_string_var_declaration -> var1_list ':' double_byte_string_spec ."]
  114 [label="114\nvar1_list -> var1_list ',' IDENTIFIER ."]
  115 [label="115\nfb_name_decl -> fb_name_list ':' function_block_type_name .\nfb_name_decl -> fb_name_list ':' function_block_type_name . ':' '=' structure_initialization"]
  115 -> 144 [style=solid label="':'"]
  116 [label="116\nfb_name_list -> fb_name_list ',' IDENTIFIER ."]
  117 [label="117\nvar_init_decl_list -> var_init_decl_list ';' var_init_decl ."]
  118 [label="118\nbit_string_type_name -> BOOL ."]
  119 [label="119\nvar_declarations -> VAR var_constant_spec var_init_decl_list END_VAR ."]
  120 [label="120\nfuzzify_block -> FUZZIFY IDENTIFIER linguistic_term_list . END_FUZZIFY\nlinguistic_term_list -> linguistic_term_list . linguistic_term"]
  120 -> 145 [style=solid label="END_FUZZIFY"]
  120 -> 146 [style=solid label="TERM"]
  120 -> 147 [style=dashed label="linguistic_term"]
  121 [label="121\ndefuzzify_block -> DEFUZZIFY IDENTIFIER . range_opt linguistic_term_list defuzzification_method default_value END_DEFUZZIFY"]
  121 -> 148 [style=solid label="RANGE"]
  121 -> 149 [style=dashed label="range_opt"]
  122 [label="122\nrule_block -> RULEBLOCK . IDENTIFIER operator_definition activation_method_opt accumulation_method rule_list END_RULEBLOCK"]
  122 -> 150 [style=solid label="IDENTIFIER"]
  123 [label="123\nrule_block_list -> rule_block_list rule_block ."]
  124 [label="124\nfunction_block_body -> fuzzify_block_list defuzzify_block_list rule_block_list option_block_list .\noption_block_list -> option_block_list . option_block"]
  124 -> 151 [style=solid label="OPTION"]
  124 -> 152 [style=dashed label="option_block"]
  125 [label="125\nfb_name_decl -> IDENTIFIER ':' function_block_type_name ':' . '=' structure_initialization"]
  125 -> 153 [style=solid label="'='"]
  126 [label="126\ninitialized_structure -> IDENTIFIER ':' . '=' structure_initialization"]
  126 -> 154 [style=solid label="'='"]
  127 [label="127\nedge_type -> R_EDGE ."]
  128 [label="128\nedge_type -> F_EDGE ."]
  129 [label="129\nedge_declaration -> var1_list ':' BOOL edge_type ."]
  130 [label="130\nsingle_byte_string_spec -> STRING ':' . '=' CHARACTER_STRING"]
  130 -> 155 [style=solid label="'='"]
  131 [label="131\nsingle_byte_string_spec -> STRING '[' . INTEGER_NUMBER ']'\nsingle_byte_string_spec -> STRING '[' . INTEGER_NUMBER ']' ':' '=' CHARACTER_STRING"]
  131 -> 156 [style=solid label="INTEGER_NUMBER"]
  132 [label="132\ndouble_byte_string_spec -> WSTRING ':' . '=' CHARACTER_STRING"]
  132 -> 157 [style=solid label="'='"]
  133 [label="133\ndouble_byte_string_spec -> WSTRING '[' . INTEGER_NUMBER ']'\ndouble_byte_string_spec -> WSTRING '[' . INTEGER_NUMBER ']' ':' '=' CHARACTER_STRING"]
  133 -> 158 [style=solid label="INTEGER_NUMBER"]
  134 [label="134\narray_specification -> ARRAY '[' . subrange_list ']' OF non_generic_type_name"]
  134 -> 159 [style=solid label="SIGNED_INTEGER"]
  134 -> 160 [style=dashed label="subrange"]
  134 -> 161 [style=dashed label="subrange_list"]
  135 [label="135\nenumerated_value -> IDENTIFIER .\nenumerated_type_name -> IDENTIFIER ."]
  136 [label="136\nenumerated_specification -> '(' enumerated_value_list . ')'\nenumerated_value_list -> enumerated_value_list . ',' enumerated_value"]
  136 -> 162 [style=solid label="','"]
  136 -> 163 [style=solid label="')'"]
  137 [label="137\nenumerated_value_list -> enumerated_value ."]
  138 [label="138\nenumerated_value -> enumerated_type_name . '#' IDENTIFIER"]
  138 -> 164 [style=solid label="'#'"]
  139 [label="139\nsimple_spec_init -> simple_specification ':' . '=' constant"]
  139 -> 165 [style=solid label="'='"]
  140 [label="140\nsubrange_specification -> integer_type_name '(' . subrange ')'"]
  140 -> 159 [style=solid label="SIGNED_INTEGER"]
  140 -> 166 [style=dashed label="subrange"]
  141 [label="141\nsubrange_spec_init -> subrange_specification ':' . '=' SIGNED_INTEGER"]
  141 -> 167 [style=solid label="'='"]
  142 [label="142\nenumerated_spec_init -> enumerated_specification ':' . '=' enumerated_value"]
  142 -> 168 [style=solid label="'='"]
  143 [label="143\narray_spec_init -> array_specification ':' . '=' array_initialization"]
  143 -> 169 [style=solid label="'='"]
  144 [label="144\nfb_name_decl -> fb_name_list ':' function_block_type_name ':' . '=' structure_initialization"]
  144 -> 170 [style=solid label="'='"]
  145 [label="145\nfuzzify_block -> FUZZIFY IDENTIFIER linguistic_term_list END_FUZZIFY ."]
  146 [label="146\nlinguistic_term -> TERM . IDENTIFIER ':' '=' membership_function ';'"]
  146 -> 171 [style=solid label="IDENTIFIER"]
  147 [label="147\nlinguistic_term_list -> linguistic_term_list linguistic_term ."]
  148 [label="148\nrange_opt -> RANGE . '(' numeric_literal '.' '.' numeric_literal ')' ';'"]
  148 -> 172 [style=solid label="'('"]
  149 [label="149\ndefuzzify_block -> DEFUZZIFY IDENTIFIER range_opt . linguistic_term_list defuzzification_method default_value END_DEFUZZIFY"]
  149 -> 173 [style=dashed label="linguistic_term_list"]
  150 [label="150\nrule_block -> RULEBLOCK IDENTIFIER . operator_definition activation_method_opt accumulation_method rule_list END_RULEBLOCK"]
  150 -> 174 [style=solid label="OR"]
  150 -> 175 [style=dashed label="operator_definition"]
  150 -> 176 [style=dashed label="operator_or_opt"]
  151 [label="151\noption_block -> OPTION . pragma_list END_OPTION"]
  151 -> 177 [style=dashed label="pragma_list"]
  152 [label="152\noption_block_list -> option_block_list option_block ."]
  153 [label="153\nfb_name_decl -> IDENTIFIER ':' function_block_type_name ':' '=' . structure_initialization"]
  153 -> 178 [style=solid label="'('"]
  153 -> 179 [style=dashed label="structure_initialization"]
  154 [label="154\ninitialized_structure -> IDENTIFIER ':' '=' . structure_initialization"]
  154 -> 178 [style=solid label="'('"]
  154 -> 180 [style=dashed label="structure_initialization"]
  155 [label="155\nsingle_byte_string_spec -> STRING ':' '=' . CHARACTER_STRING"]
  155 -> 181 [style=solid label="CHARACTER_STRING"]
  156 [label="156\nsingle_byte_string_spec -> STRING '[' INTEGER_NUMBER . ']'\nsingle_byte_string_spec -> STRING '[' INTEGER_NUMBER . ']' ':' '=' CHARACTER_STRING"]
  156 -> 182 [style=solid label="']'"]
  157 [label="157\ndouble_byte_string_spec -> WSTRING ':' '=' . CHARACTER_STRING"]
  157 -> 183 [style=solid label="CHARACTER_STRING"]
  158 [label="158\ndouble_byte_string_spec -> WSTRING '[' INTEGER_NUMBER . ']'\ndouble_byte_string_spec -> WSTRING '[' INTEGER_NUMBER . ']' ':' '=' CHARACTER_STRING"]
  158 -> 184 [style=solid label="']'"]
  159 [label="159\nsubrange -> SIGNED_INTEGER . '.' '.' SIGNED_INTEGER"]
  159 -> 185 [style=solid label="'.'"]
  160 [label="160\nsubrange_list -> subrange .\nsubrange_list -> subrange . ',' subrange_list"]
  160 -> 186 [style=solid label="','"]
  161 [label="161\narray_specification -> ARRAY '[' subrange_list . ']' OF non_generic_type_name"]
  161 -> 187 [style=solid label="']'"]
  162 [label="162\nenumerated_value_list -> enumerated_value_list ',' . enumerated_value"]
  162 -> 135 [style=solid label="IDENTIFIER"]
  162 -> 188 [style=dashed label="enumerated_value"]
  162 -> 138 [style=dashed label="enumerated_type_name"]
  163 [label="163\nenumerated_specification -> '(' enumerated_value_list ')' ."]
  164 [label="164\nenumerated_value -> enumerated_type_name '#' . IDENTIFIER"]
  164 -> 189 [style=solid label="IDENTIFIER"]
  165 [label="165\nsimple_spec_init -> simple_specification ':' '=' . constant"]
  165 -> 190 [style=solid label="BOOL"]
  165 -> 68 [style=solid label="BYTE"]
  165 -> 69 [style=solid label="WORD"]
  165 -> 70 [style=solid label="DWORD"]
  165 -> 71 [style=solid label="LWORD"]
  165 -> 191 [style=solid label="TIME"]
  165 -> 192 [style=solid label="TIME_OF_DAY"]
  165 -> 193 [style=solid label="TOD"]
  165 -> 194 [style=solid label="DATE"]
  165 -> 195 [style=solid label="DATE_AND_TIME"]
  165 -> 78 [style=solid label="SINT"]
  165 -> 79 [style=solid label="INT"]
  165 -> 80 [style=solid label="DINT"]
  165 -> 81 [style=solid label="LINT"]
  165 -> 82 [style=solid label="USINT"]
  165 -> 83 [style=solid label="UINT"]
  165 -> 84 [style=solid label="UDINT"]
  165 -> 85 [style=solid label="ULINT"]
  165 -> 86 [style=solid label="REAL"]
  165 -> 87 [style=solid label="LREAL"]
  165 -> 196 [style=solid label="TRUE"]
  165 -> 197 [style=solid label="FALSE"]
  165 -> 198 [style=solid label="CHARACTER_STRING"]
  165 -> 199 [style=solid label="'T'"]
  165 -> 200 [style=solid label="'D'"]
  165 -> 201 [style=dashed label="numeric_literal"]
  165 -> 202 [style=dashed label="integer_type_name"]
  165 -> 96 [style=dashed label="signed_integer_type_name"]
  165 -> 97 [style=dashed label="unsigned_integer_type_name"]
  165 -> 203 [style=dashed label="real_type_name"]
  165 -> 204 [style=dashed label="bit_string_type_name"]
  165 -> 205 [style=dashed label="constant"]
  165 -> 206 [style=dashed label="integer_literal"]
  165 -> 207 [style=dashed label="integer_type_name_opt"]
  165 -> 208 [style=dashed label="real_literal"]
  165 -> 209 [style=dashed label="real_type_name_opt"]
  165 -> 210 [style=dashed label="time_literal"]
  165 -> 211 [style=dashed label="duration_literal"]
  165 -> 212 [style=dashed label="time_of_day_literal"]
  165 -> 213 [style=dashed label="date_literal"]
  165 -> 214 [style=dashed label="date_and_time_literal"]
  165 -> 215 [style=dashed label="boolean_literal"]
  165 -> 216 [style=dashed label="boolean_type_name_opt"]
  165 -> 217 [style=dashed label="bit_string_literal"]
  165 -> 218 [style=dashed label="bit_string_type_name_opt"]
  165 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  166 [label="166\nsubrange_specification -> integer_type_name '(' subrange . ')'"]
  166 -> 219 [style=solid label="')'"]
  167 [label="167\nsubrange_spec_init -> subrange_specification ':' '=' . SIGNED_INTEGER"]
  167 -> 220 [style=solid label="SIGNED_INTEGER"]
  168 [label="168\nenumerated_spec_init -> enumerated_specification ':' '=' . enumerated_value"]
  168 -> 135 [style=solid label="IDENTIFIER"]
  168 -> 221 [style=dashed label="enumerated_value"]
  168 -> 138 [style=dashed label="enumerated_type_name"]
  169 [label="169\narray_spec_init -> array_specification ':' '=' . array_initialization"]
  169 -> 222 [style=solid label="'['"]
  169 -> 223 [style=dashed label="array_initialization"]
  170 [label="170\nfb_name_decl -> fb_name_list ':' function_block_type_name ':' '=' . structure_initialization"]
  170 -> 178 [style=solid label="'('"]
  170 -> 224 [style=dashed label="structure_initialization"]
  171 [label="171\nlinguistic_term -> TERM IDENTIFIER . ':' '=' membership_function ';'"]
  171 -> 225 [style=solid label="':'"]
  172 [label="172\nrange_opt -> RANGE '(' . numeric_literal '.' '.' numeric_literal ')' ';'"]
  172 -> 78 [style=solid label="SINT"]
  172 -> 79 [style=solid label="INT"]
  172 -> 80 [style=solid label="DINT"]
  172 -> 81 [style=solid label="LINT"]
  172 -> 82 [style=solid label="USINT"]
  172 -> 83 [style=solid label="UINT"]
  172 -> 84 [style=solid label="UDINT"]
  172 -> 85 [style=solid label="ULINT"]
  172 -> 86 [style=solid label="REAL"]
  172 -> 87 [style=solid label="LREAL"]
  172 -> 226 [style=dashed label="numeric_literal"]
  172 -> 202 [style=dashed label="integer_type_name"]
  172 -> 96 [style=dashed label="signed_integer_type_name"]
  172 -> 97 [style=dashed label="unsigned_integer_type_name"]
  172 -> 203 [style=dashed label="real_type_name"]
  172 -> 206 [style=dashed label="integer_literal"]
  172 -> 207 [style=dashed label="integer_type_name_opt"]
  172 -> 208 [style=dashed label="real_literal"]
  172 -> 209 [style=dashed label="real_type_name_opt"]
  173 [label="173\ndefuzzify_block -> DEFUZZIFY IDENTIFIER range_opt linguistic_term_list . defuzzification_method default_value END_DEFUZZIFY\nlinguistic_term_list -> linguistic_term_list . linguistic_term"]
  173 -> 146 [style=solid label="TERM"]
  173 -> 227 [style=solid label="METHOD"]
  173 -> 147 [style=dashed label="linguistic_term"]
  173 -> 228 [style=dashed label="defuzzification_method"]
  174 [label="174\noperator_or_opt -> OR . ':' or_type"]
  174 -> 229 [style=solid label="':'"]
  175 [label="175\nrule_block -> RULEBLOCK IDENTIFIER operator_definition . activation_method_opt accumulation_method rule_list END_RULEBLOCK"]
  175 -> 230 [style=solid label="ACT"]
  175 -> 231 [style=dashed label="activation_method_opt"]
  175 -> 232 [style=dashed label="activation_method"]
  176 [label="176\noperator_definition -> operator_or_opt . operator_and_opt ';'"]
  176 -> 233 [style=solid label="AND"]
  176 -> 234 [style=dashed label="operator_and_opt"]
  177 [label="177\noption_block -> OPTION pragma_list . END_OPTION\npragma_list -> pragma_list . pragma"]
  177 -> 235 [style=solid label="END_OPTION"]
  177 -> 236 [style=solid label="PRAGMA"]
  177 -> 237 [style=dashed label="pragma"]
  178 [label="178\nstructure_initialization -> '(' . structure_element_initialization_list ')'"]
  178 -> 238 [style=solid label="IDENTIFIER"]
  178 -> 239 [style=dashed label="structure_element_initialization_list"]
  178 -> 240 [style=dashed label="structure_element_initialization"]
  179 [label="179\nfb_name_decl -> IDENTIFIER ':' function_block_type_name ':' '=' structure_initialization ."]
  180 [label="180\ninitialized_structure -> IDENTIFIER ':' '=' structure_initialization ."]
  181 [label="181\nsingle_byte_string_spec -> STRING ':' '=' CHARACTER_STRING ."]
  182 [label="182\nsingle_byte_string_spec -> STRING '[' INTEGER_NUMBER ']' .\nsingle_byte_string_spec -> STRING '[' INTEGER_NUMBER ']' . ':' '=' CHARACTER_STRING"]
  182 -> 241 [style=solid label="':'"]
  183 [label="183\ndouble_byte_string_spec -> WSTRING ':' '=' CHARACTER_STRING ."]
  184 [label="184\ndouble_byte_string_spec -> WSTRING '[' INTEGER_NUMBER ']' .\ndouble_byte_string_spec -> WSTRING '[' INTEGER_NUMBER ']' . ':' '=' CHARACTER_STRING"]
  184 -> 242 [style=solid label="':'"]
  185 [label="185\nsubrange -> SIGNED_INTEGER '.' . '.' SIGNED_INTEGER"]
  185 -> 243 [style=solid label="'.'"]
  186 [label="186\nsubrange_list -> subrange ',' . subrange_list"]
  186 -> 159 [style=solid label="SIGNED_INTEGER"]
  186 -> 160 [style=dashed label="subrange"]
  186 -> 244 [style=dashed label="subrange_list"]
  187 [label="187\narray_specification -> ARRAY '[' subrange_list ']' . OF non_generic_type_name"]
  187 -> 245 [style=solid label="OF"]
  188 [label="188\nenumerated_value_list -> enumerated_value_list ',' enumerated_value ."]
  189 [label="189\nenumerated_value -> enumerated_type_name '#' IDENTIFIER ."]
  190 [label="190\nbit_string_type_name -> BOOL .\nboolean_type_name_opt -> BOOL . '#'"]
  190 -> 246 [style=solid label="'#'"]
  191 [label="191\nduration_literal -> TIME . '#' interval\nduration_literal -> TIME . '#' '-' interval"]
  191 -> 247 [style=solid label="'#'"]
  192 [label="192\ntime_of_day_literal -> TIME_OF_DAY . '#' daytime"]
  192 -> 248 [style=solid label="'#'"]
  193 [label="193\ntime_of_day_literal -> TOD . '#' daytime"]
  193 -> 249 [style=solid label="'#'"]
  194 [label="194\ndate_literal -> DATE . '#' date"]
  194 -> 250 [style=solid label="'#'"]
  195 [label="195\ndate_and_time_literal -> DATE_AND_TIME . '#' date_literal '-' daytime"]
  195 -> 251 [style=solid label="'#'"]
  196 [label="196\nboolean_literal -> TRUE ."]
  197 [label="197\nboolean_literal -> FALSE ."]
  198 [label="198\nconstant -> CHARACTER_STRING ."]
  199 [label="199\nduration_literal -> 'T' . '#' interval\nduration_literal -> 'T' . '#' '-' interval"]
  199 -> 252 [style=solid label="'#'"]
  200 [label="200\ndate_literal -> 'D' . '#' date"]
  200 -> 253 [style=solid label="'#'"]
  201 [label="201\nconstant -> numeric_literal ."]
  202 [label="202\ninteger_type_name_opt -> integer_type_name . '#'"]
  202 -> 254 [style=solid label="'#'"]
  203 [label="203\nreal_type_name_opt -> real_type_name . '#'"]
  203 -> 255 [style=solid label="'#'"]
  204 [label="204\nbit_string_type_name_opt -> bit_string_type_name . '#'"]
  204 -> 256 [style=solid label="'#'"]
  205 [label="205\nsimple_spec_init -> simple_specification ':' '=' constant ."]
  206 [label="206\nnumeric_literal -> integer_literal ."]
  207 [label="207\ninteger_literal -> integer_type_name_opt . type_integer_literal"]
  207 -> 257 [style=solid label="BINARY_INTEGER"]
  207 -> 258 [style=solid label="OCTAL_INTEGER"]
  207 -> 259 [style=solid label="HEX_INTEGER"]
  207 -> 260 [style=solid label="SIGNED_INTEGER"]
  207 -> 261 [style=dashed label="type_integer_literal"]
  208 [label="208\nnumeric_literal -> real_literal ."]
  209 [label="209\nreal_literal -> real_type_name_opt . REAL_NUMBER"]
  209 -> 262 [style=solid label="REAL_NUMBER"]
  210 [label="210\nconstant -> time_literal ."]
  211 [label="211\ntime_literal -> duration_literal ."]
  212 [label="212\ntime_literal -> time_of_day_literal ."]
  213 [label="213\ntime_literal -> date_literal ."]
  214 [label="214\ntime_literal -> date_and_time_literal ."]
  215 [label="215\nconstant -> boolean_literal ."]
  216 [label="216\nboolean_literal -> boolean_type_name_opt . '0'\nboolean_literal -> boolean_type_name_opt . '1'"]
  216 -> 263 [style=solid label="'0'"]
  216 -> 264 [style=solid label="'1'"]
  217 [label="217\nconstant -> bit_string_literal ."]
  218 [label="218\nbit_string_literal -> bit_string_type_name_opt . bit_string_integer_literals"]
  218 -> 265 [style=solid label="BINARY_INTEGER"]
  218 -> 266 [style=solid label="OCTAL_INTEGER"]
  218 -> 267 [style=solid label="HEX_INTEGER"]
  218 -> 268 [style=solid label="INTEGER_NUMBER"]
  218 -> 269 [style=dashed label="bit_string_integer_literals"]
  219 [label="219\nsubrange_specification -> integer_type_name '(' subrange ')' ."]
  220 [label="220\nsubrange_spec_init -> subrange_specification ':' '=' SIGNED_INTEGER ."]
  221 [label="221\nenumerated_spec_init -> enumerated_specification ':' '=' enumerated_value ."]
  222 [label="222\narray_initialization -> '[' . array_initial_elements_list ']'"]
  222 -> 135 [style=solid label="IDENTIFIER"]
  222 -> 190 [style=solid label="BOOL"]
  222 -> 68 [style=solid label="BYTE"]
  222 -> 69 [style=solid label="WORD"]
  222 -> 70 [style=solid label="DWORD"]
  222 -> 71 [style=solid label="LWORD"]
  222 -> 191 [style=solid label="TIME"]
  222 -> 192 [style=solid label="TIME_OF_DAY"]
  222 -> 193 [style=solid label="TOD"]
  222 -> 194 [style=solid label="DATE"]
  222 -> 195 [style=solid label="DATE_AND_TIME"]
  222 -> 78 [style=solid label="SINT"]
  222 -> 79 [style=solid label="INT"]
  222 -> 80 [style=solid label="DINT"]
  222 -> 81 [style=solid label="LINT"]
  222 -> 82 [style=solid label="USINT"]
  222 -> 83 [style=solid label="UINT"]
  222 -> 84 [style=solid label="UDINT"]
  222 -> 85 [style=solid label="ULINT"]
  222 -> 86 [style=solid label="REAL"]
  222 -> 87 [style=solid label="LREAL"]
  222 -> 196 [style=solid label="TRUE"]
  222 -> 197 [style=solid label="FALSE"]
  222 -> 198 [style=solid label="CHARACTER_STRING"]
  222 -> 270 [style=solid label="INTEGER_NUMBER"]
  222 -> 178 [style=solid label="'('"]
  222 -> 199 [style=solid label="'T'"]
  222 -> 200 [style=solid label="'D'"]
  222 -> 222 [style=solid label="'['"]
  222 -> 201 [style=dashed label="numeric_literal"]
  222 -> 202 [style=dashed label="integer_type_name"]
  222 -> 96 [style=dashed label="signed_integer_type_name"]
  222 -> 97 [style=dashed label="unsigned_integer_type_name"]
  222 -> 203 [style=dashed label="real_type_name"]
  222 -> 204 [style=dashed label="bit_string_type_name"]
  222 -> 271 [style=dashed label="constant"]
  222 -> 206 [style=dashed label="integer_literal"]
  222 -> 207 [style=dashed label="integer_type_name_opt"]
  222 -> 208 [style=dashed label="real_literal"]
  222 -> 209 [style=dashed label="real_type_name_opt"]
  222 -> 210 [style=dashed label="time_literal"]
  222 -> 211 [style=dashed label="duration_literal"]
  222 -> 212 [style=dashed label="time_of_day_literal"]
  222 -> 213 [style=dashed label="date_literal"]
  222 -> 214 [style=dashed label="date_and_time_literal"]
  222 -> 215 [style=dashed label="boolean_literal"]
  222 -> 216 [style=dashed label="boolean_type_name_opt"]
  222 -> 217 [style=dashed label="bit_string_literal"]
  222 -> 218 [style=dashed label="bit_string_type_name_opt"]
  222 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  222 -> 272 [style=dashed label="enumerated_value"]
  222 -> 138 [style=dashed label="enumerated_type_name"]
  222 -> 273 [style=dashed label="array_initialization"]
  222 -> 274 [style=dashed label="array_initial_elements_list"]
  222 -> 275 [style=dashed label="array_initial_elements"]
  222 -> 276 [style=dashed label="array_initial_element"]
  222 -> 277 [style=dashed label="structure_initialization"]
  223 [label="223\narray_spec_init -> array_specification ':' '=' array_initialization ."]
  224 [label="224\nfb_name_decl -> fb_name_list ':' function_block_type_name ':' '=' structure_initialization ."]
  225 [label="225\nlinguistic_term -> TERM IDENTIFIER ':' . '=' membership_function ';'"]
  225 -> 278 [style=solid label="'='"]
  226 [label="226\nrange_opt -> RANGE '(' numeric_literal . '.' '.' numeric_literal ')' ';'"]
  226 -> 279 [style=solid label="'.'"]
  227 [label="227\ndefuzzification_method -> METHOD . ':' defuzz_method ';'"]
  227 -> 280 [style=solid label="':'"]
  228 [label="228\ndefuzzify_block -> DEFUZZIFY IDENTIFIER range_opt linguistic_term_list defuzzification_method . default_value END_DEFUZZIFY"]
  228 -> 281 [style=solid label="DEFAULT"]
  228 -> 282 [style=dashed label="default_value"]
  229 [label="229\noperator_or_opt -> OR ':' . or_type"]
  229 -> 283 [style=solid label="MAX"]
  229 -> 284 [style=solid label="ASUM"]
  229 -> 285 [style=solid label="BSUM"]
  229 -> 286 [style=dashed label="or_type"]
  230 [label="230\nactivation_method -> ACT . ':' act_type ';'"]
  230 -> 287 [style=solid label="':'"]
  231 [label="231\nrule_block -> RULEBLOCK IDENTIFIER operator_definition activation_method_opt . accumulation_method rule_list END_RULEBLOCK"]
  231 -> 288 [style=solid label="ACCU"]
  231 -> 289 [style=dashed label="accumulation_method"]
  232 [label="232\nactivation_method_opt -> activation_method ."]
  233 [label="233\noperator_and_opt -> AND . ':' and_type"]
  233 -> 290 [style=solid label="':'"]
  234 [label="234\noperator_definition -> operator_or_opt operator_and_opt . ';'"]
  234 -> 291 [style=solid label="';'"]
  235 [label="235\noption_block -> OPTION pragma_list END_OPTION ."]
  236 [label="236\npragma -> PRAGMA . IDENTIFIER\npragma -> PRAGMA . IDENTIFIER INTEGER_NUMBER"]
  236 -> 292 [style=solid label="IDENTIFIER"]
  237 [label="237\npragma_list -> pragma_list pragma ."]
  238 [label="238\nstructure_element_initialization -> IDENTIFIER . ':' '=' structure_element_type"]
  238 -> 293 [style=solid label="':'"]
  239 [label="239\nstructure_initialization -> '(' structure_element_initialization_list . ')'\nstructure_element_initialization_list -> structure_element_initialization_list . ',' structure_element_initialization"]
  239 -> 294 [style=solid label="','"]
  239 -> 295 [style=solid label="')'"]
  240 [label="240\nstructure_element_initialization_list -> structure_element_initialization ."]
  241 [label="241\nsingle_byte_string_spec -> STRING '[' INTEGER_NUMBER ']' ':' . '=' CHARACTER_STRING"]
  241 -> 296 [style=solid label="'='"]
  242 [label="242\ndouble_byte_string_spec -> WSTRING '[' INTEGER_NUMBER ']' ':' . '=' CHARACTER_STRING"]
  242 -> 297 [style=solid label="'='"]
  243 [label="243\nsubrange -> SIGNED_INTEGER '.' '.' . SIGNED_INTEGER"]
  243 -> 298 [style=solid label="SIGNED_INTEGER"]
  244 [label="244\nsubrange_list -> subrange ',' subrange_list ."]
  245 [label="245\narray_specification -> ARRAY '[' subrange_list ']' OF . non_generic_type_name"]
  245 -> 299 [style=solid label="IDENTIFIER"]
  245 -> 118 [style=solid label="BOOL"]
  245 -> 300 [style=solid label="STRING"]
  245 -> 301 [style=solid label="WSTRING"]
  245 -> 68 [style=solid label="BYTE"]
  245 -> 69 [style=solid label="WORD"]
  245 -> 70 [style=solid label="DWORD"]
  245 -> 71 [style=solid label="LWORD"]
  245 -> 72 [style=solid label="TIME"]
  245 -> 73 [style=solid label="TIME_OF_DAY"]
  245 -> 74 [style=solid label="TOD"]
  245 -> 75 [style=solid label="DATE"]
  245 -> 76 [style=solid label="DATE_AND_TIME"]
  245 -> 77 [style=solid label="DT"]
  245 -> 78 [style=solid label="SINT"]
  245 -> 79 [style=solid label="INT"]
  245 -> 80 [style=solid label="DINT"]
  245 -> 81 [style=solid label="LINT"]
  245 -> 82 [style=solid label="USINT"]
  245 -> 83 [style=solid label="UINT"]
  245 -> 84 [style=solid label="UDINT"]
  245 -> 85 [style=solid label="ULINT"]
  245 -> 86 [style=solid label="REAL"]
  245 -> 87 [style=solid label="LREAL"]
  245 -> 302 [style=dashed label="elementary_type_name"]
  245 -> 94 [style=dashed label="numeric_type_name"]
  245 -> 303 [style=dashed label="integer_type_name"]
  245 -> 96 [style=dashed label="signed_integer_type_name"]
  245 -> 97 [style=dashed label="unsigned_integer_type_name"]
  245 -> 98 [style=dashed label="real_type_name"]
  245 -> 99 [style=dashed label="date_type_name"]
  245 -> 100 [style=dashed label="bit_string_type_name"]
  245 -> 304 [style=dashed label="simple_type_name"]
  245 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  245 -> 305 [style=dashed label="subrange_type_name"]
  245 -> 306 [style=dashed label="enumerated_type_name"]
  245 -> 307 [style=dashed label="non_generic_type_name"]
  245 -> 308 [style=dashed label="derived_type_name"]
  245 -> 309 [style=dashed label="single_element_type_name"]
  246 [label="246\nboolean_type_name_opt -> BOOL '#' ."]
  247 [label="247\nduration_literal -> TIME '#' . interval\nduration_literal -> TIME '#' . '-' interval"]
  247 -> 310 [style=solid label="INTEGER_NUMBER"]
  247 -> 311 [style=solid label="'-'"]
  247 -> 312 [style=dashed label="interval"]
  247 -> 313 [style=dashed label="days"]
  247 -> 314 [style=dashed label="hours"]
  247 -> 315 [style=dashed label="minutes"]
  247 -> 316 [style=dashed label="seconds"]
  247 -> 317 [style=dashed label="milliseconds"]
  247 -> 318 [style=dashed label="fixed_point"]
  248 [label="248\ntime_of_day_literal -> TIME_OF_DAY '#' . daytime"]
  248 -> 319 [style=solid label="INTEGER_NUMBER"]
  248 -> 320 [style=dashed label="daytime"]
  249 [label="249\ntime_of_day_literal -> TOD '#' . daytime"]
  249 -> 319 [style=solid label="INTEGER_NUMBER"]
  249 -> 321 [style=dashed label="daytime"]
  250 [label="250\ndate_literal -> DATE '#' . date"]
  250 -> 322 [style=solid label="INTEGER_NUMBER"]
  250 -> 323 [style=dashed label="date"]
  251 [label="251\ndate_and_time_literal -> DATE_AND_TIME '#' . date_literal '-' daytime"]
  251 -> 194 [style=solid label="DATE"]
  251 -> 200 [style=solid label="'D'"]
  251 -> 324 [style=dashed label="date_literal"]
  252 [label="252\nduration_literal -> 'T' '#' . interval\nduration_literal -> 'T' '#' . '-' interval"]
  252 -> 310 [style=solid label="INTEGER_NUMBER"]
  252 -> 325 [style=solid label="'-'"]
  252 -> 326 [style=dashed label="interval"]
  252 -> 313 [style=dashed label="days"]
  252 -> 314 [style=dashed label="hours"]
  252 -> 315 [style=dashed label="minutes"]
  252 -> 316 [style=dashed label="seconds"]
  252 -> 317 [style=dashed label="milliseconds"]
  252 -> 318 [style=dashed label="fixed_point"]
  253 [label="253\ndate_literal -> 'D' '#' . date"]
  253 -> 322 [style=solid label="INTEGER_NUMBER"]
  253 -> 327 [style=dashed label="date"]
  254 [label="254\ninteger_type_name_opt -> integer_type_name '#' ."]
  255 [label="255\nreal_type_name_opt -> real_type_name '#' ."]
  256 [label="256\nbit_string_type_name_opt -> bit_string_type_name '#' ."]
  257 [label="257\ntype_integer_literal -> BINARY_INTEGER ."]
  258 [label="258\ntype_integer_literal -> OCTAL_INTEGER ."]
  259 [label="259\ntype_integer_literal -> HEX_INTEGER ."]
  260 [label="260\ntype_integer_literal -> SIGNED_INTEGER ."]
  261 [label="261\ninteger_literal -> integer_type_name_opt type_integer_literal ."]
  262 [label="262\nreal_literal -> real_type_name_opt REAL_NUMBER ."]
  263 [label="263\nboolean_literal -> boolean_type_name_opt '0' ."]
  264 [label="264\nboolean_literal -> boolean_type_name_opt '1' ."]
  265 [label="265\nbit_string_integer_literals -> BINARY_INTEGER ."]
  266 [label="266\nbit_string_integer_literals -> OCTAL_INTEGER ."]
  267 [label="267\nbit_string_integer_literals -> HEX_INTEGER ."]
  268 [label="268\nbit_string_integer_literals -> INTEGER_NUMBER ."]
  269 [label="269\nbit_string_literal -> bit_string_type_name_opt bit_string_integer_literals ."]
  270 [label="270\narray_initial_elements -> INTEGER_NUMBER . '(' array_initial_element ')'"]
  270 -> 328 [style=solid label="'('"]
  271 [label="271\narray_initial_element -> constant ."]
  272 [label="272\narray_initial_element -> enumerated_value ."]
  273 [label="273\narray_initial_element -> array_initialization ."]
  274 [label="274\narray_initialization -> '[' array_initial_elements_list . ']'\narray_initial_elements_list -> array_initial_elements_list . ',' array_initial_elements"]
  274 -> 329 [style=solid label="','"]
  274 -> 330 [style=solid label="']'"]
  275 [label="275\narray_initial_elements_list -> array_initial_elements ."]
  276 [label="276\narray_initial_elements -> array_initial_element ."]
  277 [label="277\narray_initial_element -> structure_initialization ."]
  278 [label="278\nlinguistic_term -> TERM IDENTIFIER ':' '=' . membership_function ';'"]
  278 -> 331 [style=solid label="IDENTIFIER"]
  278 -> 78 [style=solid label="SINT"]
  278 -> 79 [style=solid label="INT"]
  278 -> 80 [style=solid label="DINT"]
  278 -> 81 [style=solid label="LINT"]
  278 -> 82 [style=solid label="USINT"]
  278 -> 83 [style=solid label="UINT"]
  278 -> 84 [style=solid label="UDINT"]
  278 -> 85 [style=solid label="ULINT"]
  278 -> 86 [style=solid label="REAL"]
  278 -> 87 [style=solid label="LREAL"]
  278 -> 332 [style=solid label="'('"]
  278 -> 333 [style=dashed label="membership_function"]
  278 -> 334 [style=dashed label="singleton"]
  278 -> 335 [style=dashed label="points"]
  278 -> 336 [style=dashed label="point_list"]
  278 -> 337 [style=dashed label="point"]
  278 -> 338 [style=dashed label="numeric_literal"]
  278 -> 202 [style=dashed label="integer_type_name"]
  278 -> 96 [style=dashed label="signed_integer_type_name"]
  278 -> 97 [style=dashed label="unsigned_integer_type_name"]
  278 -> 203 [style=dashed label="real_type_name"]
  278 -> 206 [style=dashed label="integer_literal"]
  278 -> 207 [style=dashed label="integer_type_name_opt"]
  278 -> 208 [style=dashed label="real_literal"]
  278 -> 209 [style=dashed label="real_type_name_opt"]
  279 [label="279\nrange_opt -> RANGE '(' numeric_literal '.' . '.' numeric_literal ')' ';'"]
  279 -> 339 [style=solid label="'.'"]
  280 [label="280\ndefuzzification_method -> METHOD ':' . defuzz_method ';'"]
  280 -> 340 [style=solid label="COG"]
  280 -> 341 [style=solid label="COGS"]
  280 -> 342 [style=solid label="COA"]
  280 -> 343 [style=solid label="LM"]
  280 -> 344 [style=solid label="RM"]
  280 -> 345 [style=dashed label="defuzz_method"]
  281 [label="281\ndefault_value -> DEFAULT . ':' '=' default_val ';'"]
  281 -> 346 [style=solid label="':'"]
  282 [label="282\ndefuzzify_block -> DEFUZZIFY IDENTIFIER range_opt linguistic_term_list defuzzification_method default_value . END_DEFUZZIFY"]
  282 -> 347 [style=solid label="END_DEFUZZIFY"]
  283 [label="283\nor_type -> MAX ."]
  284 [label="284\nor_type -> ASUM ."]
  285 [label="285\nor_type -> BSUM ."]
  286 [label="286\noperator_or_opt -> OR ':' or_type ."]
  287 [label="287\nactivation_method -> ACT ':' . act_type ';'"]
  287 -> 348 [style=solid label="MIN"]
  287 -> 349 [style=solid label="PROD"]
  287 -> 350 [style=dashed label="act_type"]
  288 [label="288\naccumulation_method -> ACCU . ':' accu_type ';'"]
  288 -> 351 [style=solid label="':'"]
  289 [label="289\nrule_block -> RULEBLOCK IDENTIFIER operator_definition activation_method_opt accumulation_method . rule_list END_RULEBLOCK"]
  289 -> 352 [style=dashed label="rule_list"]
  290 [label="290\noperator_and_opt -> AND ':' . and_type"]
  290 -> 353 [style=solid label="MIN"]
  290 -> 354 [style=solid label="PROD"]
  290 -> 355 [style=solid label="BDIF"]
  290 -> 356 [style=dashed label="and_type"]
  291 [label="291\noperator_definition -> operator_or_opt operator_and_opt ';' ."]
  292 [label="292\npragma -> PRAGMA IDENTIFIER .\npragma -> PRAGMA IDENTIFIER . INTEGER_NUMBER"]
  292 -> 357 [style=solid label="INTEGER_NUMBER"]
  293 [label="293\nstructure_element_initialization -> IDENTIFIER ':' . '=' structure_element_type"]
  293 -> 358 [style=solid label="'='"]
  294 [label="294\nstructure_element_initialization_list -> structure_element_initialization_list ',' . structure_element_initialization"]
  294 -> 238 [style=solid label="IDENTIFIER"]
  294 -> 359 [style=dashed label="structure_element_initialization"]
  295 [label="295\nstructure_initialization -> '(' structure_element_initialization_list ')' ."]
  296 [label="296\nsingle_byte_string_spec -> STRING '[' INTEGER_NUMBER ']' ':' '=' . CHARACTER_STRING"]
  296 -> 360 [style=solid label="CHARACTER_STRING"]
  297 [label="297\ndouble_byte_string_spec -> WSTRING '[' INTEGER_NUMBER ']' ':' '=' . CHARACTER_STRING"]
  297 -> 361 [style=solid label="CHARACTER_STRING"]
  298 [label="298\nsubrange -> SIGNED_INTEGER '.' '.' SIGNED_INTEGER ."]
  299 [label="299\nsimple_type_name -> IDENTIFIER .\nsubrange_type_name -> IDENTIFIER .\nenumerated_type_name -> IDENTIFIER .\nderived_type_name -> IDENTIFIER ."]
  300 [label="300\nelementary_type_name -> STRING ."]
  301 [label="301\nelementary_type_name -> WSTRING ."]
  302 [label="302\nnon_generic_type_name -> elementary_type_name ."]
  303 [label="303\nnumeric_type_name -> integer_type_name ."]
  304 [label="304\nsingle_element_type_name -> simple_type_name ."]
  305 [label="305\nsingle_element_type_name -> subrange_type_name ."]
  306 [label="306\nsingle_element_type_name -> enumerated_type_name ."]
  307 [label="307\narray_specification -> ARRAY '[' subrange_list ']' OF non_generic_type_name ."]
  308 [label="308\nnon_generic_type_name -> derived_type_name ."]
  309 [label="309\nderived_type_name -> single_element_type_name ."]
  310 [label="310\ndays -> INTEGER_NUMBER . 'd' hours\ndays -> INTEGER_NUMBER . 'd' '_' hours\nhours -> INTEGER_NUMBER . 'h' minutes\nhours -> INTEGER_NUMBER . 'h' '_' minutes\nminutes -> INTEGER_NUMBER . 'm' seconds\nminutes -> INTEGER_NUMBER . 'm' '_' seconds\nseconds -> INTEGER_NUMBER . 's' milliseconds\nseconds -> INTEGER_NUMBER . 's' '_' milliseconds\nfixed_point -> INTEGER_NUMBER .\nfixed_point -> INTEGER_NUMBER . '.' INTEGER_NUMBER"]
  310 -> 362 [style=solid label="'.'"]
  310 -> 363 [style=solid label="'d'"]
  310 -> 364 [style=solid label="'h'"]
  310 -> 365 [style=solid label="'m'"]
  310 -> 366 [style=solid label="'s'"]
  311 [label="311\nduration_literal -> TIME '#' '-' . interval"]
  311 -> 310 [style=solid label="INTEGER_NUMBER"]
  311 -> 367 [style=dashed label="interval"]
  311 -> 313 [style=dashed label="days"]
  311 -> 314 [style=dashed label="hours"]
  311 -> 315 [style=dashed label="minutes"]
  311 -> 316 [style=dashed label="seconds"]
  311 -> 317 [style=dashed label="milliseconds"]
  311 -> 318 [style=dashed label="fixed_point"]
  312 [label="312\nduration_literal -> TIME '#' interval ."]
  313 [label="313\ninterval -> days ."]
  314 [label="314\ninterval -> hours ."]
  315 [label="315\ninterval -> minutes ."]
  316 [label="316\ninterval -> seconds ."]
  317 [label="317\ninterval -> milliseconds ."]
  318 [label="318\ndays -> fixed_point . 'd'\nhours -> fixed_point . 'h'\nminutes -> fixed_point . 'm'\nseconds -> fixed_point . 's'\nmilliseconds -> fixed_point . 'm' 's'"]
  318 -> 368 [style=solid label="'d'"]
  318 -> 369 [style=solid label="'h'"]
  318 -> 370 [style=solid label="'m'"]
  318 -> 371 [style=solid label="'s'"]
  319 [label="319\ndaytime -> INTEGER_NUMBER . ':' INTEGER_NUMBER ':' fixed_point"]
  319 -> 372 [style=solid label="':'"]
  320 [label="320\ntime_of_day_literal -> TIME_OF_DAY '#' daytime ."]
  321 [label="321\ntime_of_day_literal -> TOD '#' daytime ."]
  322 [label="322\ndate -> INTEGER_NUMBER . '-' INTEGER_NUMBER '-' INTEGER_NUMBER"]
  322 -> 373 [style=solid label="'-'"]
  323 [label="323\ndate_literal -> DATE '#' date ."]
  324 [label="324\ndate_and_time_literal -> DATE_AND_TIME '#' date_literal . '-' daytime"]
  324 -> 374 [style=solid label="'-'"]
  325 [label="325\nduration_literal -> 'T' '#' '-' . interval"]
  325 -> 310 [style=solid label="INTEGER_NUMBER"]
  325 -> 375 [style=dashed label="interval"]
  325 -> 313 [style=dashed label="days"]
  325 -> 314 [style=dashed label="hours"]
  325 -> 315 [style=dashed label="minutes"]
  325 -> 316 [style=dashed label="seconds"]
  325 -> 317 [style=dashed label="milliseconds"]
  325 -> 318 [style=dashed label="fixed_point"]
  326 [label="326\nduration_literal -> 'T' '#' interval ."]
  327 [label="327\ndate_literal -> 'D' '#' date ."]
  328 [label="328\narray_initial_elements -> INTEGER_NUMBER '(' . array_initial_element ')'"]
  328 -> 135 [style=solid label="IDENTIFIER"]
  328 -> 190 [style=solid label="BOOL"]
  328 -> 68 [style=solid label="BYTE"]
  328 -> 69 [style=solid label="WORD"]
  328 -> 70 [style=solid label="DWORD"]
  328 -> 71 [style=solid label="LWORD"]
  328 -> 191 [style=solid label="TIME"]
  328 -> 192 [style=solid label="TIME_OF_DAY"]
  328 -> 193 [style=solid label="TOD"]
  328 -> 194 [style=solid label="DATE"]
  328 -> 195 [style=solid label="DATE_AND_TIME"]
  328 -> 78 [style=solid label="SINT"]
  328 -> 79 [style=solid label="INT"]
  328 -> 80 [style=solid label="DINT"]
  328 -> 81 [style=solid label="LINT"]
  328 -> 82 [style=solid label="USINT"]
  328 -> 83 [style=solid label="UINT"]
  328 -> 84 [style=solid label="UDINT"]
  328 -> 85 [style=solid label="ULINT"]
  328 -> 86 [style=solid label="REAL"]
  328 -> 87 [style=solid label="LREAL"]
  328 -> 196 [style=solid label="TRUE"]
  328 -> 197 [style=solid label="FALSE"]
  328 -> 198 [style=solid label="CHARACTER_STRING"]
  328 -> 178 [style=solid label="'('"]
  328 -> 199 [style=solid label="'T'"]
  328 -> 200 [style=solid label="'D'"]
  328 -> 222 [style=solid label="'['"]
  328 -> 201 [style=dashed label="numeric_literal"]
  328 -> 202 [style=dashed label="integer_type_name"]
  328 -> 96 [style=dashed label="signed_integer_type_name"]
  328 -> 97 [style=dashed label="unsigned_integer_type_name"]
  328 -> 203 [style=dashed label="real_type_name"]
  328 -> 204 [style=dashed label="bit_string_type_name"]
  328 -> 271 [style=dashed label="constant"]
  328 -> 206 [style=dashed label="integer_literal"]
  328 -> 207 [style=dashed label="integer_type_name_opt"]
  328 -> 208 [style=dashed label="real_literal"]
  328 -> 209 [style=dashed label="real_type_name_opt"]
  328 -> 210 [style=dashed label="time_literal"]
  328 -> 211 [style=dashed label="duration_literal"]
  328 -> 212 [style=dashed label="time_of_day_literal"]
  328 -> 213 [style=dashed label="date_literal"]
  328 -> 214 [style=dashed label="date_and_time_literal"]
  328 -> 215 [style=dashed label="boolean_literal"]
  328 -> 216 [style=dashed label="boolean_type_name_opt"]
  328 -> 217 [style=dashed label="bit_string_literal"]
  328 -> 218 [style=dashed label="bit_string_type_name_opt"]
  328 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  328 -> 272 [style=dashed label="enumerated_value"]
  328 -> 138 [style=dashed label="enumerated_type_name"]
  328 -> 273 [style=dashed label="array_initialization"]
  328 -> 376 [style=dashed label="array_initial_element"]
  328 -> 277 [style=dashed label="structure_initialization"]
  329 [label="329\narray_initial_elements_list -> array_initial_elements_list ',' . array_initial_elements"]
  329 -> 135 [style=solid label="IDENTIFIER"]
  329 -> 190 [style=solid label="BOOL"]
  329 -> 68 [style=solid label="BYTE"]
  329 -> 69 [style=solid label="WORD"]
  329 -> 70 [style=solid label="DWORD"]
  329 -> 71 [style=solid label="LWORD"]
  329 -> 191 [style=solid label="TIME"]
  329 -> 192 [style=solid label="TIME_OF_DAY"]
  329 -> 193 [style=solid label="TOD"]
  329 -> 194 [style=solid label="DATE"]
  329 -> 195 [style=solid label="DATE_AND_TIME"]
  329 -> 78 [style=solid label="SINT"]
  329 -> 79 [style=solid label="INT"]
  329 -> 80 [style=solid label="DINT"]
  329 -> 81 [style=solid label="LINT"]
  329 -> 82 [style=solid label="USINT"]
  329 -> 83 [style=solid label="UINT"]
  329 -> 84 [style=solid label="UDINT"]
  329 -> 85 [style=solid label="ULINT"]
  329 -> 86 [style=solid label="REAL"]
  329 -> 87 [style=solid label="LREAL"]
  329 -> 196 [style=solid label="TRUE"]
  329 -> 197 [style=solid label="FALSE"]
  329 -> 198 [style=solid label="CHARACTER_STRING"]
  329 -> 270 [style=solid label="INTEGER_NUMBER"]
  329 -> 178 [style=solid label="'('"]
  329 -> 199 [style=solid label="'T'"]
  329 -> 200 [style=solid label="'D'"]
  329 -> 222 [style=solid label="'['"]
  329 -> 201 [style=dashed label="numeric_literal"]
  329 -> 202 [style=dashed label="integer_type_name"]
  329 -> 96 [style=dashed label="signed_integer_type_name"]
  329 -> 97 [style=dashed label="unsigned_integer_type_name"]
  329 -> 203 [style=dashed label="real_type_name"]
  329 -> 204 [style=dashed label="bit_string_type_name"]
  329 -> 271 [style=dashed label="constant"]
  329 -> 206 [style=dashed label="integer_literal"]
  329 -> 207 [style=dashed label="integer_type_name_opt"]
  329 -> 208 [style=dashed label="real_literal"]
  329 -> 209 [style=dashed label="real_type_name_opt"]
  329 -> 210 [style=dashed label="time_literal"]
  329 -> 211 [style=dashed label="duration_literal"]
  329 -> 212 [style=dashed label="time_of_day_literal"]
  329 -> 213 [style=dashed label="date_literal"]
  329 -> 214 [style=dashed label="date_and_time_literal"]
  329 -> 215 [style=dashed label="boolean_literal"]
  329 -> 216 [style=dashed label="boolean_type_name_opt"]
  329 -> 217 [style=dashed label="bit_string_literal"]
  329 -> 218 [style=dashed label="bit_string_type_name_opt"]
  329 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  329 -> 272 [style=dashed label="enumerated_value"]
  329 -> 138 [style=dashed label="enumerated_type_name"]
  329 -> 273 [style=dashed label="array_initialization"]
  329 -> 377 [style=dashed label="array_initial_elements"]
  329 -> 276 [style=dashed label="array_initial_element"]
  329 -> 277 [style=dashed label="structure_initialization"]
  330 [label="330\narray_initialization -> '[' array_initial_elements_list ']' ."]
  331 [label="331\nsingleton -> IDENTIFIER ."]
  332 [label="332\npoint -> '(' . point_x ',' numeric_literal ')'"]
  332 -> 378 [style=solid label="IDENTIFIER"]
  332 -> 78 [style=solid label="SINT"]
  332 -> 79 [style=solid label="INT"]
  332 -> 80 [style=solid label="DINT"]
  332 -> 81 [style=solid label="LINT"]
  332 -> 82 [style=solid label="USINT"]
  332 -> 83 [style=solid label="UINT"]
  332 -> 84 [style=solid label="UDINT"]
  332 -> 85 [style=solid label="ULINT"]
  332 -> 86 [style=solid label="REAL"]
  332 -> 87 [style=solid label="LREAL"]
  332 -> 379 [style=dashed label="point_x"]
  332 -> 380 [style=dashed label="numeric_literal"]
  332 -> 202 [style=dashed label="integer_type_name"]
  332 -> 96 [style=dashed label="signed_integer_type_name"]
  332 -> 97 [style=dashed label="unsigned_integer_type_name"]
  332 -> 203 [style=dashed label="real_type_name"]
  332 -> 206 [style=dashed label="integer_literal"]
  332 -> 207 [style=dashed label="integer_type_name_opt"]
  332 -> 208 [style=dashed label="real_literal"]
  332 -> 209 [style=dashed label="real_type_name_opt"]
  333 [label="333\nlinguistic_term -> TERM IDENTIFIER ':' '=' membership_function . ';'"]
  333 -> 381 [style=solid label="';'"]
  334 [label="334\nmembership_function -> singleton ."]
  335 [label="335\nmembership_function -> points ."]
  336 [label="336\npoints -> point_list .\npoint_list -> point_list . point"]
  336 -> 332 [style=solid label="'('"]
  336 -> 382 [style=dashed label="point"]
  337 [label="337\npoint_list -> point ."]
  338 [label="338\nsingleton -> numeric_literal ."]
  339 [label="339\nrange_opt -> RANGE '(' numeric_literal '.' '.' . numeric_literal ')' ';'"]
  339 -> 78 [style=solid label="SINT"]
  339 -> 79 [style=solid label="INT"]
  339 -> 80 [style=solid label="DINT"]
  339 -> 81 [style=solid label="LINT"]
  339 -> 82 [style=solid label="USINT"]
  339 -> 83 [style=solid label="UINT"]
  339 -> 84 [style=solid label="UDINT"]
  339 -> 85 [style=solid label="ULINT"]
  339 -> 86 [style=solid label="REAL"]
  339 -> 87 [style=solid label="LREAL"]
  339 -> 383 [style=dashed label="numeric_literal"]
  339 -> 202 [style=dashed label="integer_type_name"]
  339 -> 96 [style=dashed label="signed_integer_type_name"]
  339 -> 97 [style=dashed label="unsigned_integer_type_name"]
  339 -> 203 [style=dashed label="real_type_name"]
  339 -> 206 [style=dashed label="integer_literal"]
  339 -> 207 [style=dashed label="integer_type_name_opt"]
  339 -> 208 [style=dashed label="real_literal"]
  339 -> 209 [style=dashed label="real_type_name_opt"]
  340 [label="340\ndefuzz_method -> COG ."]
  341 [label="341\ndefuzz_method -> COGS ."]
  342 [label="342\ndefuzz_method -> COA ."]
  343 [label="343\ndefuzz_method -> LM ."]
  344 [label="344\ndefuzz_method -> RM ."]
  345 [label="345\ndefuzzification_method -> METHOD ':' defuzz_method . ';'"]
  345 -> 384 [style=solid label="';'"]
  346 [label="346\ndefault_value -> DEFAULT ':' . '=' default_val ';'"]
  346 -> 385 [style=solid label="'='"]
  347 [label="347\ndefuzzify_block -> DEFUZZIFY IDENTIFIER range_opt linguistic_term_list defuzzification_method default_value END_DEFUZZIFY ."]
  348 [label="348\nact_type -> MIN ."]
  349 [label="349\nact_type -> PROD ."]
  350 [label="350\nactivation_method -> ACT ':' act_type . ';'"]
  350 -> 386 [style=solid label="';'"]
  351 [label="351\naccumulation_method -> ACCU ':' . accu_type ';'"]
  351 -> 387 [style=solid label="MAX"]
  351 -> 388 [style=solid label="BSUM"]
  351 -> 389 [style=solid label="NSUM"]
  351 -> 390 [style=dashed label="accu_type"]
  352 [label="352\nrule_block -> RULEBLOCK IDENTIFIER operator_definition activation_method_opt accumulation_method rule_list . END_RULEBLOCK\nrule_list -> rule_list . rule"]
  352 -> 391 [style=solid label="END_RULEBLOCK"]
  352 -> 392 [style=solid label="RULE"]
  352 -> 393 [style=dashed label="rule"]
  353 [label="353\nand_type -> MIN ."]
  354 [label="354\nand_type -> PROD ."]
  355 [label="355\nand_type -> BDIF ."]
  356 [label="356\noperator_and_opt -> AND ':' and_type ."]
  357 [label="357\npragma -> PRAGMA IDENTIFIER INTEGER_NUMBER ."]
  358 [label="358\nstructure_element_initialization -> IDENTIFIER ':' '=' . structure_element_type"]
  358 -> 135 [style=solid label="IDENTIFIER"]
  358 -> 190 [style=solid label="BOOL"]
  358 -> 68 [style=solid label="BYTE"]
  358 -> 69 [style=solid label="WORD"]
  358 -> 70 [style=solid label="DWORD"]
  358 -> 71 [style=solid label="LWORD"]
  358 -> 191 [style=solid label="TIME"]
  358 -> 192 [style=solid label="TIME_OF_DAY"]
  358 -> 193 [style=solid label="TOD"]
  358 -> 194 [style=solid label="DATE"]
  358 -> 195 [style=solid label="DATE_AND_TIME"]
  358 -> 78 [style=solid label="SINT"]
  358 -> 79 [style=solid label="INT"]
  358 -> 80 [style=solid label="DINT"]
  358 -> 81 [style=solid label="LINT"]
  358 -> 82 [style=solid label="USINT"]
  358 -> 83 [style=solid label="UINT"]
  358 -> 84 [style=solid label="UDINT"]
  358 -> 85 [style=solid label="ULINT"]
  358 -> 86 [style=solid label="REAL"]
  358 -> 87 [style=solid label="LREAL"]
  358 -> 196 [style=solid label="TRUE"]
  358 -> 197 [style=solid label="FALSE"]
  358 -> 198 [style=solid label="CHARACTER_STRING"]
  358 -> 178 [style=solid label="'('"]
  358 -> 199 [style=solid label="'T'"]
  358 -> 200 [style=solid label="'D'"]
  358 -> 222 [style=solid label="'['"]
  358 -> 201 [style=dashed label="numeric_literal"]
  358 -> 202 [style=dashed label="integer_type_name"]
  358 -> 96 [style=dashed label="signed_integer_type_name"]
  358 -> 97 [style=dashed label="unsigned_integer_type_name"]
  358 -> 203 [style=dashed label="real_type_name"]
  358 -> 204 [style=dashed label="bit_string_type_name"]
  358 -> 394 [style=dashed label="constant"]
  358 -> 206 [style=dashed label="integer_literal"]
  358 -> 207 [style=dashed label="integer_type_name_opt"]
  358 -> 208 [style=dashed label="real_literal"]
  358 -> 209 [style=dashed label="real_type_name_opt"]
  358 -> 210 [style=dashed label="time_literal"]
  358 -> 211 [style=dashed label="duration_literal"]
  358 -> 212 [style=dashed label="time_of_day_literal"]
  358 -> 213 [style=dashed label="date_literal"]
  358 -> 214 [style=dashed label="date_and_time_literal"]
  358 -> 215 [style=dashed label="boolean_literal"]
  358 -> 216 [style=dashed label="boolean_type_name_opt"]
  358 -> 217 [style=dashed label="bit_string_literal"]
  358 -> 218 [style=dashed label="bit_string_type_name_opt"]
  358 -> 102 [style=dashed label="bit_string_type_name_without_bool"]
  358 -> 395 [style=dashed label="enumerated_value"]
  358 -> 138 [style=dashed label="enumerated_type_name"]
  358 -> 396 [style=dashed label="array_initialization"]
  358 -> 397 [style=dashed label="structure_initialization"]
  358 -> 398 [style=dashed label="structure_element_type"]
  359 [label="359\nstructure_element_initialization_list -> structure_element_initialization_list ',' structure_element_initialization ."]
  360 [label="360\nsingle_byte_string_spec -> STRING '[' INTEGER_NUMBER ']' ':' '=' CHARACTER_STRING ."]
  361 [label="361\ndouble_byte_string_spec -> WSTRING '[' INTEGER_NUMBER ']' ':' '=' CHARACTER_STRING ."]
  362 [label="362\nfixed_point -> INTEGER_NUMBER '.' . INTEGER_NUMBER"]
  362 -> 399 [style=solid label="INTEGER_NUMBER"]
  363 [label="363\ndays -> INTEGER_NUMBER 'd' . hours\ndays -> INTEGER_NUMBER 'd' . '_' hours"]
  363 -> 400 [style=solid label="INTEGER_NUMBER"]
  363 -> 401 [style=solid label="'_'"]
  363 -> 402 [style=dashed label="hours"]
  363 -> 403 [style=dashed label="fixed_point"]
  364 [label="364\nhours -> INTEGER_NUMBER 'h' . minutes\nhours -> INTEGER_NUMBER 'h' . '_' minutes"]
  364 -> 404 [style=solid label="INTEGER_NUMBER"]
  364 -> 405 [style=solid label="'_'"]
  364 -> 406 [style=dashed label="minutes"]
  364 -> 407 [style=dashed label="fixed_point"]
  365 [label="365\nminutes -> INTEGER_NUMBER 'm' . seconds\nminutes -> INTEGER_NUMBER 'm' . '_' seconds"]
  365 -> 408 [style=solid label="INTEGER_NUMBER"]
  365 -> 409 [style=solid label="'_'"]
  365 -> 410 [style=dashed label="seconds"]
  365 -> 411 [style=dashed label="fixed_point"]
  366 [label="366\nseconds -> INTEGER_NUMBER 's' . milliseconds\nseconds -> INTEGER_NUMBER 's' . '_' milliseconds"]
  366 -> 412 [style=solid label="INTEGER_NUMBER"]
  366 -> 413 [style=solid label="'_'"]
  366 -> 414 [style=dashed label="milliseconds"]
  366 -> 415 [style=dashed label="fixed_point"]
  367 [label="367\nduration_literal -> TIME '#' '-' interval ."]
  368 [label="368\ndays -> fixed_point 'd' ."]
  369 [label="369\nhours -> fixed_point 'h' ."]
  370 [label="370\nminutes -> fixed_point 'm' .\nmilliseconds -> fixed_point 'm' . 's'"]
  370 -> 416 [style=solid label="'s'"]
  371 [label="371\nseconds -> fixed_point 's' ."]
  372 [label="372\ndaytime -> INTEGER_NUMBER ':' . INTEGER_NUMBER ':' fixed_point"]
  372 -> 417 [style=solid label="INTEGER_NUMBER"]
  373 [label="373\ndate -> INTEGER_NUMBER '-' . INTEGER_NUMBER '-' INTEGER_NUMBER"]
  373 -> 418 [style=solid label="INTEGER_NUMBER"]
  374 [label="374\ndate_and_time_literal -> DATE_AND_TIME '#' date_literal '-' . daytime"]
  374 -> 319 [style=solid label="INTEGER_NUMBER"]
  374 -> 419 [style=dashed label="daytime"]
  375 [label="375\nduration_literal -> 'T' '#' '-' interval ."]
  376 [label="376\narray_initial_elements -> INTEGER_NUMBER '(' array_initial_element . ')'"]
  376 -> 420 [style=solid label="')'"]
  377 [label="377\narray_initial_elements_list -> array_initial_elements_list ',' array_initial_elements ."]
  378 [label="378\npoint_x -> IDENTIFIER ."]
  379 [label="379\npoint -> '(' point_x . ',' numeric_literal ')'"]
  379 -> 421 [style=solid label="','"]
  380 [label="380\npoint_x -> numeric_literal ."]
  381 [label="381\nlinguistic_term -> TERM IDENTIFIER ':' '=' membership_function ';' ."]
  382 [label="382\npoint_list -> point_list point ."]
  383 [label="383\nrange_opt -> RANGE '(' numeric_literal '.' '.' numeric_literal . ')' ';'"]
  383 -> 422 [style=solid label="')'"]
  384 [label="384\ndefuzzification_method -> METHOD ':' defuzz_method ';' ."]
  385 [label="385\ndefault_value -> DEFAULT ':' '=' . default_val ';'"]
  385 -> 423 [style=solid label="NC"]
  385 -> 78 [style=solid label="SINT"]
  385 -> 79 [style=solid label="INT"]
  385 -> 80 [style=solid label="DINT"]
  385 -> 81 [style=solid label="LINT"]
  385 -> 82 [style=solid label="USINT"]
  385 -> 83 [style=solid label="UINT"]
  385 -> 84 [style=solid label="UDINT"]
  385 -> 85 [style=solid label="ULINT"]
  385 -> 86 [style=solid label="REAL"]
  385 -> 87 [style=solid label="LREAL"]
  385 -> 424 [style=dashed label="default_val"]
  385 -> 425 [style=dashed label="numeric_literal"]
  385 -> 202 [style=dashed label="integer_type_name"]
  385 -> 96 [style=dashed label="signed_integer_type_name"]
  385 -> 97 [style=dashed label="unsigned_integer_type_name"]
  385 -> 203 [style=dashed label="real_type_name"]
  385 -> 206 [style=dashed label="integer_literal"]
  385 -> 207 [style=dashed label="integer_type_name_opt"]
  385 -> 208 [style=dashed label="real_literal"]
  385 -> 209 [style=dashed label="real_type_name_opt"]
  386 [label="386\nactivation_method -> ACT ':' act_type ';' ."]
  387 [label="387\naccu_type -> MAX ."]
  388 [label="388\naccu_type -> BSUM ."]
  389 [label="389\naccu_type -> NSUM ."]
  390 [label="390\naccumulation_method -> ACCU ':' accu_type . ';'"]
  390 -> 426 [style=solid label="';'"]
  391 [label="391\nrule_block -> RULEBLOCK IDENTIFIER operator_definition activation_method_opt accumulation_method rule_list END_RULEBLOCK ."]
  392 [label="392\nrule -> RULE . integer_literal ':' IF condition THEN conclusion weighting_opt ';'"]
  392 -> 78 [style=solid label="SINT"]
  392 -> 79 [style=solid label="INT"]
  392 -> 80 [style=solid label="DINT"]
  392 -> 81 [style=solid label="LINT"]
  392 -> 82 [style=solid label="USINT"]
  392 -> 83 [style=solid label="UINT"]
  392 -> 84 [style=solid label="UDINT"]
  392 -> 85 [style=solid label="ULINT"]
  392 -> 202 [style=dashed label="integer_type_name"]
  392 -> 96 [style=dashed label="signed_integer_type_name"]
  392 -> 97 [style=dashed label="unsigned_integer_type_name"]
  392 -> 427 [style=dashed label="integer_literal"]
  392 -> 207 [style=dashed label="integer_type_name_opt"]
  393 [label="393\nrule_list -> rule_list rule ."]
  394 [label="394\nstructure_element_type -> constant ."]
  395 [label="395\nstructure_element_type -> enumerated_value ."]
  396 [label="396\nstructure_element_type -> array_initialization ."]
  397 [label="397\nstructure_element_type -> structure_initialization ."]
  398 [label="398\nstructure_element_initialization -> IDENTIFIER ':' '=' structure_element_type ."]
  399 [label="399\nfixed_point -> INTEGER_NUMBER '.' INTEGER_NUMBER ."]
  400 [label="400\nhours -> INTEGER_NUMBER . 'h' minutes\nhours -> INTEGER_NUMBER . 'h' '_' minutes\nfixed_point -> INTEGER_NUMBER .\nfixed_point -> INTEGER_NUMBER . '.' INTEGER_NUMBER"]
  400 -> 362 [style=solid label="'.'"]
  400 -> 364 [style=solid label="'h'"]
  401 [label="401\ndays -> INTEGER_NUMBER 'd' '_' . hours"]
  401 -> 400 [style=solid label="INTEGER_NUMBER"]
  401 -> 428 [style=dashed label="hours"]
  401 -> 403 [style=dashed label="fixed_point"]
  402 [label="402\ndays -> INTEGER_NUMBER 'd' hours ."]
  403 [label="403\nhours -> fixed_point . 'h'"]
  403 -> 369 [style=solid label="'h'"]
  404 [label="404\nminutes -> INTEGER_NUMBER . 'm' seconds\nminutes -> INTEGER_NUMBER . 'm' '_' seconds\nfixed_point -> INTEGER_NUMBER .\nfixed_point -> INTEGER_NUMBER . '.' INTEGER_NUMBER"]
  404 -> 362 [style=solid label="'.'"]
  404 -> 365 [style=solid label="'m'"]
  405 [label="405\nhours -> INTEGER_NUMBER 'h' '_' . minutes"]
  405 -> 404 [style=solid label="INTEGER_NUMBER"]
  405 -> 429 [style=dashed label="minutes"]
  405 -> 407 [style=dashed label="fixed_point"]
  406 [label="406\nhours -> INTEGER_NUMBER 'h' minutes ."]
  407 [label="407\nminutes -> fixed_point . 'm'"]
  407 -> 430 [style=solid label="'m'"]
  408 [label="408\nseconds -> INTEGER_NUMBER . 's' milliseconds\nseconds -> INTEGER_NUMBER . 's' '_' milliseconds\nfixed_point -> INTEGER_NUMBER .\nfixed_point -> INTEGER_NUMBER . '.' INTEGER_NUMBER"]
  408 -> 362 [style=solid label="'.'"]
  408 -> 366 [style=solid label="'s'"]
  409 [label="409\nminutes -> INTEGER_NUMBER 'm' '_' . seconds"]
  409 -> 408 [style=solid label="INTEGER_NUMBER"]
  409 -> 431 [style=dashed label="seconds"]
  409 -> 411 [style=dashed label="fixed_point"]
  410 [label="410\nminutes -> INTEGER_NUMBER 'm' seconds ."]
  411 [label="411\nseconds -> fixed_point . 's'"]
  411 -> 371 [style=solid label="'s'"]
  412 [label="412\nfixed_point -> INTEGER_NUMBER .\nfixed_point -> INTEGER_NUMBER . '.' INTEGER_NUMBER"]
  412 -> 362 [style=solid label="'.'"]
  413 [label="413\nseconds -> INTEGER_NUMBER 's' '_' . milliseconds"]
  413 -> 412 [style=solid label="INTEGER_NUMBER"]
  413 -> 432 [style=dashed label="milliseconds"]
  413 -> 415 [style=dashed label="fixed_point"]
  414 [label="414\nseconds -> INTEGER_NUMBER 's' milliseconds ."]
  415 [label="415\nmilliseconds -> fixed_point . 'm' 's'"]
  415 -> 433 [style=solid label="'m'"]
  416 [label="416\nmilliseconds -> fixed_point 'm' 's' ."]
  417 [label="417\ndaytime -> INTEGER_NUMBER ':' INTEGER_NUMBER . ':' fixed_point"]
  417 -> 434 [style=solid label="':'"]
  418 [label="418\ndate -> INTEGER_NUMBER '-' INTEGER_NUMBER . '-' INTEGER_NUMBER"]
  418 -> 435 [style=solid label="'-'"]
  419 [label="419\ndate_and_time_literal -> DATE_AND_TIME '#' date_literal '-' daytime ."]
  420 [label="420\narray_initial_elements -> INTEGER_NUMBER '(' array_initial_element ')' ."]
  421 [label="421\npoint -> '(' point_x ',' . numeric_literal ')'"]
  421 -> 78 [style=solid label="SINT"]
  421 -> 79 [style=solid label="INT"]
  421 -> 80 [style=solid label="DINT"]
  421 -> 81 [style=solid label="LINT"]
  421 -> 82 [style=solid label="USINT"]
  421 -> 83 [style=solid label="UINT"]
  421 -> 84 [style=solid label="UDINT"]
  421 -> 85 [style=solid label="ULINT"]
  421 -> 86 [style=solid label="REAL"]
  421 -> 87 [style=solid label="LREAL"]
  421 -> 436 [style=dashed label="numeric_literal"]
  421 -> 202 [style=dashed label="integer_type_name"]
  421 -> 96 [style=dashed label="signed_integer_type_name"]
  421 -> 97 [style=dashed label="unsigned_integer_type_name"]
  421 -> 203 [style=dashed label="real_type_name"]
  421 -> 206 [style=dashed label="integer_literal"]
  421 -> 207 [style=dashed label="integer_type_name_opt"]
  421 -> 208 [style=dashed label="real_literal"]
  421 -> 209 [style=dashed label="real_type_name_opt"]
  422 [label="422\nrange_opt -> RANGE '(' numeric_literal '.' '.' numeric_literal ')' . ';'"]
  422 -> 437 [style=solid label="';'"]
  423 [label="423\ndefault_val -> NC ."]
  424 [label="424\ndefault_value -> DEFAULT ':' '=' default_val . ';'"]
  424 -> 438 [style=solid label="';'"]
  425 [label="425\ndefault_val -> numeric_literal ."]
  426 [label="426\naccumulation_method -> ACCU ':' accu_type ';' ."]
  427 [label="427\nrule -> RULE integer_literal . ':' IF condition THEN conclusion weighting_opt ';'"]
  427 -> 439 [style=solid label="':'"]
  428 [label="428\ndays -> INTEGER_NUMBER 'd' '_' hours ."]
  429 [label="429\nhours -> INTEGER_NUMBER 'h' '_' minutes ."]
  430 [label="430\nminutes -> fixed_point 'm' ."]
  431 [label="431\nminutes -> INTEGER_NUMBER 'm' '_' seconds ."]
  432 [label="432\nseconds -> INTEGER_NUMBER 's' '_' milliseconds ."]
  433 [label="433\nmilliseconds -> fixed_point 'm' . 's'"]
  433 -> 416 [style=solid label="'s'"]
  434 [label="434\ndaytime -> INTEGER_NUMBER ':' INTEGER_NUMBER ':' . fixed_point"]
  434 -> 412 [style=solid label="INTEGER_NUMBER"]
  434 -> 440 [style=dashed label="fixed_point"]
  435 [label="435\ndate -> INTEGER_NUMBER '-' INTEGER_NUMBER '-' . INTEGER_NUMBER"]
  435 -> 441 [style=solid label="INTEGER_NUMBER"]
  436 [label="436\npoint -> '(' point_x ',' numeric_literal . ')'"]
  436 -> 442 [style=solid label="')'"]
  437 [label="437\nrange_opt -> RANGE '(' numeric_literal '.' '.' numeric_literal ')' ';' ."]
  438 [label="438\ndefault_value -> DEFAULT ':' '=' default_val ';' ."]
  439 [label="439\nrule -> RULE integer_literal ':' . IF condition THEN conclusion weighting_opt ';'"]
  439 -> 443 [style=solid label="IF"]
  440 [label="440\ndaytime -> INTEGER_NUMBER ':' INTEGER_NUMBER ':' fixed_point ."]
  441 [label="441\ndate -> INTEGER_NUMBER '-' INTEGER_NUMBER '-' INTEGER_NUMBER ."]
  442 [label="442\npoint -> '(' point_x ',' numeric_literal ')' ."]
  443 [label="443\nrule -> RULE integer_literal ':' IF . condition THEN conclusion weighting_opt ';'"]
  443 -> 444 [style=solid label="NOT"]
  443 -> 445 [style=solid label="IDENTIFIER"]
  443 -> 446 [style=solid label="'('"]
  443 -> 447 [style=dashed label="condition"]
  443 -> 448 [style=dashed label="x"]
  443 -> 449 [style=dashed label="subcondition"]
  444 [label="444\nx -> NOT . x"]
  444 -> 444 [style=solid label="NOT"]
  444 -> 445 [style=solid label="IDENTIFIER"]
  444 -> 446 [style=solid label="'('"]
  444 -> 450 [style=dashed label="x"]
  444 -> 449 [style=dashed label="subcondition"]
  445 [label="445\nsubcondition -> IDENTIFIER .\nsubcondition -> IDENTIFIER . IS IDENTIFIER\nsubcondition -> IDENTIFIER . IS NOT IDENTIFIER"]
  445 -> 451 [style=solid label="IS"]
  446 [label="446\nx -> '(' . condition ')'"]
  446 -> 444 [style=solid label="NOT"]
  446 -> 445 [style=solid label="IDENTIFIER"]
  446 -> 446 [style=solid label="'('"]
  446 -> 452 [style=dashed label="condition"]
  446 -> 448 [style=dashed label="x"]
  446 -> 449 [style=dashed label="subcondition"]
  447 [label="447\nrule -> RULE integer_literal ':' IF condition . THEN conclusion weighting_opt ';'"]
  447 -> 453 [style=solid label="THEN"]
  448 [label="448\ncondition -> x . condition_tail"]
  448 -> 454 [style=solid label="AND"]
  448 -> 455 [style=solid label="OR"]
  448 -> 456 [style=dashed label="condition_tail"]
  449 [label="449\nx -> subcondition ."]
  450 [label="450\nx -> NOT x ."]
  451 [label="451\nsubcondition -> IDENTIFIER IS . IDENTIFIER\nsubcondition -> IDENTIFIER IS . NOT IDENTIFIER"]
  451 -> 457 [style=solid label="NOT"]
  451 -> 458 [style=solid label="IDENTIFIER"]
  452 [label="452\nx -> '(' condition . ')'"]
  452 -> 459 [style=solid label="')'"]
  453 [label="453\nrule -> RULE integer_literal ':' IF condition THEN . conclusion weighting_opt ';'"]
  453 -> 460 [style=solid label="IDENTIFIER"]
  453 -> 461 [style=dashed label="conclusion"]
  453 -> 462 [style=dashed label="conclusion_elements"]
  453 -> 463 [style=dashed label="conclusion_element"]
  454 [label="454\ncondition_tail -> AND . x condition_tail"]
  454 -> 444 [style=solid label="NOT"]
  454 -> 445 [style=solid label="IDENTIFIER"]
  454 -> 446 [style=solid label="'('"]
  454 -> 464 [style=dashed label="x"]
  454 -> 449 [style=dashed label="subcondition"]
  455 [label="455\ncondition_tail -> OR . x condition_tail"]
  455 -> 444 [style=solid label="NOT"]
  455 -> 445 [style=solid label="IDENTIFIER"]
  455 -> 446 [style=solid label="'('"]
  455 -> 465 [style=dashed label="x"]
  455 -> 449 [style=dashed label="subcondition"]
  456 [label="456\ncondition -> x condition_tail ."]
  457 [label="457\nsubcondition -> IDENTIFIER IS NOT . IDENTIFIER"]
  457 -> 466 [style=solid label="IDENTIFIER"]
  458 [label="458\nsubcondition -> IDENTIFIER IS IDENTIFIER ."]
  459 [label="459\nx -> '(' condition ')' ."]
  460 [label="460\nconclusion_element -> IDENTIFIER .\nconclusion_element -> IDENTIFIER . IS IDENTIFIER"]
  460 -> 467 [style=solid label="IS"]
  461 [label="461\nrule -> RULE integer_literal ':' IF condition THEN conclusion . weighting_opt ';'"]
  461 -> 468 [style=solid label="WITH"]
  461 -> 469 [style=dashed label="weighting_opt"]
  462 [label="462\nconclusion -> conclusion_elements .\nconclusion_elements -> conclusion_elements . ',' conclusion_element"]
  462 -> 470 [style=solid label="','"]
  463 [label="463\nconclusion_elements -> conclusion_element ."]
  464 [label="464\ncondition_tail -> AND x . condition_tail"]
  464 -> 454 [style=solid label="AND"]
  464 -> 455 [style=solid label="OR"]
  464 -> 471 [style=dashed label="condition_tail"]
  465 [label="465\ncondition_tail -> OR x . condition_tail"]
  465 -> 454 [style=solid label="AND"]
  465 -> 455 [style=solid label="OR"]
  465 -> 472 [style=dashed label="condition_tail"]
  466 [label="466\nsubcondition -> IDENTIFIER IS NOT IDENTIFIER ."]
  467 [label="467\nconclusion_element -> IDENTIFIER IS . IDENTIFIER"]
  467 -> 473 [style=solid label="IDENTIFIER"]
  468 [label="468\nweighting_opt -> WITH . weighting_factor"]
  468 -> 474 [style=solid label="IDENTIFIER"]
  468 -> 78 [style=solid label="SINT"]
  468 -> 79 [style=solid label="INT"]
  468 -> 80 [style=solid label="DINT"]
  468 -> 81 [style=solid label="LINT"]
  468 -> 82 [style=solid label="USINT"]
  468 -> 83 [style=solid label="UINT"]
  468 -> 84 [style=solid label="UDINT"]
  468 -> 85 [style=solid label="ULINT"]
  468 -> 86 [style=solid label="REAL"]
  468 -> 87 [style=solid label="LREAL"]
  468 -> 475 [style=dashed label="weighting_factor"]
  468 -> 476 [style=dashed label="numeric_literal"]
  468 -> 202 [style=dashed label="integer_type_name"]
  468 -> 96 [style=dashed label="signed_integer_type_name"]
  468 -> 97 [style=dashed label="unsigned_integer_type_name"]
  468 -> 203 [style=dashed label="real_type_name"]
  468 -> 206 [style=dashed label="integer_literal"]
  468 -> 207 [style=dashed label="integer_type_name_opt"]
  468 -> 208 [style=dashed label="real_literal"]
  468 -> 209 [style=dashed label="real_type_name_opt"]
  469 [label="469\nrule -> RULE integer_literal ':' IF condition THEN conclusion weighting_opt . ';'"]
  469 -> 477 [style=solid label="';'"]
  470 [label="470\nconclusion_elements -> conclusion_elements ',' . conclusion_element"]
  470 -> 460 [style=solid label="IDENTIFIER"]
  470 -> 478 [style=dashed label="conclusion_element"]
  471 [label="471\ncondition_tail -> AND x condition_tail ."]
  472 [label="472\ncondition_tail -> OR x condition_tail ."]
  473 [label="473\nconclusion_element -> IDENTIFIER IS IDENTIFIER ."]
  474 [label="474\nweighting_factor -> IDENTIFIER ."]
  475 [label="475\nweighting_opt -> WITH weighting_factor ."]
  476 [label="476\nweighting_factor -> numeric_literal ."]
  477 [label="477\nrule -> RULE integer_literal ':' IF condition THEN conclusion weighting_opt ';' ."]
  478 [label="478\nconclusion_elements -> conclusion_elements ',' conclusion_element ."]
}
